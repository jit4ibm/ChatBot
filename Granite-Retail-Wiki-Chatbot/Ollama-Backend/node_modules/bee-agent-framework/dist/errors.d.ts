import { ObjectLike } from './internals/types.js';
import './internals/helpers/guards.js';

/**
 * Copyright 2024 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface FrameworkErrorOptions {
    isFatal?: boolean;
    isRetryable?: boolean;
    context?: ObjectLike;
}
declare class FrameworkError extends AggregateError {
    isFatal: boolean;
    isRetryable: boolean;
    context: Record<string, any>;
    constructor(message?: string, errors?: Error[], options?: FrameworkErrorOptions);
    hasFatalError(): boolean;
    traverseErrors(): Generator<Error>;
    getCause(): Error;
    explain(): string;
    dump(): string;
    static ensure(error: Error): FrameworkError;
    static isInstanceOf(error: unknown): error is FrameworkError;
    static isAbortError(error: unknown): boolean;
    static isRetryable(error: unknown): boolean;
}
declare class NotImplementedError extends FrameworkError {
    constructor(message?: string, errors?: Error[]);
}
declare class ValueError extends FrameworkError {
    constructor(message?: string, errors?: Error[], options?: FrameworkErrorOptions);
}
declare class AbortError extends FrameworkError {
    constructor(message?: string, errors?: Error[], options?: FrameworkErrorOptions);
}

export { AbortError, FrameworkError, type FrameworkErrorOptions, NotImplementedError, ValueError };
