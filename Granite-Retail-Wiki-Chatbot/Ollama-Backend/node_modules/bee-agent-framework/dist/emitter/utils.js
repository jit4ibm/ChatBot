import { EmitterError } from './errors.js';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function assertValidNamespace(path) {
  if (!path || !Array.isArray(path)) {
    throw new EmitterError("Event path cannot be empty!");
  }
  path.forEach((part) => assertValidName(part));
}
__name(assertValidNamespace, "assertValidNamespace");
function assertValidName(name) {
  if (!name || !/(^[a-zA-Z_]+$)/.test(name)) {
    throw new EmitterError("Event name or a namespace part must contain only letters (optionally underscores).", [], {
      context: {
        value: name
      }
    });
  }
}
__name(assertValidName, "assertValidName");
function createFullPath(path, name) {
  return name ? path.concat(name).join(".") : path.join(".");
}
__name(createFullPath, "createFullPath");
function isPath(name) {
  return name.includes(".");
}
__name(isPath, "isPath");

export { assertValidName, assertValidNamespace, createFullPath, isPath };
//# sourceMappingURL=utils.js.map
//# sourceMappingURL=utils.js.map