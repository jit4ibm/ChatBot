import { GetRunContext, RunContext } from './context.js';
import { A as AgentMeta, B as BaseAgent } from './base-CO-FB8hi.js';
import { AnyTool } from './tools/base.js';
import { BaseMemory } from './memory/base.js';
import { ChatLLM, ChatLLMOutput } from './llms/chat.js';
import { E as Emitter } from './emitter-DRfJC1TP.js';
import { BeeMeta, BeeCallbacks, BeeIterationToolResult, BeeRunOptions, BeeAgentRunIteration, BeeParserInput, BeeRunInput, BeeAgentTemplates, BeeRunOutput } from './agents/bee/types.js';
import { LinePrefixParser } from './agents/parsers/linePrefix.js';
import { Serializable } from './internals/serializable.js';
import { RetryCounter } from './internals/helpers/counter.js';

interface BeeRunnerLLMInput {
    meta: BeeMeta;
    signal: AbortSignal;
    emitter: Emitter<BeeCallbacks>;
}
interface BeeRunnerToolInput {
    state: BeeIterationToolResult;
    meta: BeeMeta;
    signal: AbortSignal;
    emitter: Emitter<BeeCallbacks>;
}
declare abstract class BaseRunner extends Serializable {
    protected readonly input: BeeInput;
    protected readonly options: BeeRunOptions;
    protected readonly run: GetRunContext<BeeAgent>;
    memory: BaseMemory;
    readonly iterations: BeeAgentRunIteration[];
    protected readonly failedAttemptsCounter: RetryCounter;
    constructor(input: BeeInput, options: BeeRunOptions, run: GetRunContext<BeeAgent>);
    createIteration(): Promise<{
        emitter: Emitter<BeeCallbacks>;
        state: LinePrefixParser.infer<BeeParserInput>;
        meta: BeeMeta;
        signal: AbortSignal;
    }>;
    init(input: BeeRunInput): Promise<void>;
    abstract llm(input: BeeRunnerLLMInput): Promise<BeeAgentRunIteration>;
    abstract tool(input: BeeRunnerToolInput): Promise<{
        output: string;
        success: boolean;
    }>;
    abstract get templates(): BeeAgentTemplates;
    protected abstract initMemory(input: BeeRunInput): Promise<BaseMemory>;
    createSnapshot(): {
        input: BeeInput;
        options: BeeRunOptions;
        memory: BaseMemory<unknown>;
        failedAttemptsCounter: RetryCounter;
    };
    loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>): void;
}

interface BeeInput {
    llm: ChatLLM<ChatLLMOutput>;
    tools: AnyTool[];
    memory: BaseMemory;
    meta?: Omit<AgentMeta, "tools">;
    templates?: Partial<BeeAgentTemplates>;
}
declare class BeeAgent extends BaseAgent<BeeRunInput, BeeRunOutput, BeeRunOptions> {
    protected readonly input: BeeInput;
    readonly emitter: Emitter<BeeCallbacks>;
    protected runner: new (...args: ConstructorParameters<typeof BaseRunner>) => BaseRunner;
    constructor(input: BeeInput);
    get memory(): BaseMemory<unknown>;
    get meta(): AgentMeta;
    protected _run(input: BeeRunInput, options: BeeRunOptions | undefined, run: GetRunContext<typeof this>): Promise<BeeRunOutput>;
    createSnapshot(): {
        input: BeeInput;
        emitter: Emitter<BeeCallbacks>;
        runner: new (input: BeeInput, options: BeeRunOptions, run: RunContext<BeeAgent, any>) => BaseRunner;
        isRunning: boolean;
    };
}

export { BaseRunner as B, type BeeRunnerLLMInput as a, type BeeRunnerToolInput as b, type BeeInput as c, BeeAgent as d };
