'use strict';

var zod = require('zod');
var errors_cjs = require('../errors.cjs');
var object_cjs = require('./helpers/object.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function getEnv(key) {
  return object_cjs.getProp(process.env, [
    key
  ], void 0);
}
__name(getEnv, "getEnv");
function parseEnv(key, schema, defaultValue) {
  const value = getEnv(key) ?? defaultValue;
  const result = schema.safeParse(value);
  if (!result.success) {
    if (value === void 0) {
      throw new errors_cjs.FrameworkError(`Required variable '${key}' is not set!`);
    }
    throw new errors_cjs.FrameworkError(`Failed to parse ENV variable (${key})!`, [
      result.error
    ]);
  }
  return result.data;
}
__name(parseEnv, "parseEnv");
parseEnv.asBoolean = (key, fallback = false) => {
  return parseEnv(key, zod.z.string(), String(fallback)).trim().toLowerCase() === "true";
};
function hasEnv(key) {
  return object_cjs.getProp(process.env, [
    key
  ]) !== void 0;
}
__name(hasEnv, "hasEnv");

exports.getEnv = getEnv;
exports.hasEnv = hasEnv;
exports.parseEnv = parseEnv;
//# sourceMappingURL=env.cjs.map
//# sourceMappingURL=env.cjs.map