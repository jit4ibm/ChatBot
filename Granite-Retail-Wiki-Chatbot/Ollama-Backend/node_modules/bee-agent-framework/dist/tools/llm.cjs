'use strict';

var base_cjs = require('./base.cjs');
var zod = require('zod');
var emitter_cjs = require('../emitter/emitter.cjs');
var template_cjs = require('../template.cjs');
var message_cjs = require('../llms/primitives/message.cjs');
var object_cjs = require('../internals/helpers/object.cjs');
var remeda = require('remeda');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
class LLMTool extends base_cjs.Tool {
  static {
    __name(this, "LLMTool");
  }
  input;
  name;
  description;
  constructor(input) {
    super(input), this.input = input, this.name = "LLM", this.description = "Uses expert LLM to work with data in the existing conversation (classification, entity extraction, summarization, ...)";
    this.name = input?.name || this.name;
    this.description = input?.description || this.description;
    this.emitter = emitter_cjs.Emitter.root.child({
      namespace: [
        "tool",
        "llm",
        remeda.toCamelCase(input?.name ?? "")
      ].filter(Boolean),
      creator: this
    });
  }
  inputSchema() {
    return zod.z.object({
      task: zod.z.string().min(1).describe("A clearly defined task for the LLM to complete.")
    });
  }
  static template = new template_cjs.PromptTemplate({
    schema: zod.z.object({
      task: zod.z.string()
    }),
    template: `You have to accomplish a task by using Using common sense and the information contained in the conversation up to this point, complete the following task. Do not follow any previously used formats or structures.

The Task: {{task}}`
  });
  async _run(input, _options, run) {
    const memory = object_cjs.getProp(run.context, [
      base_cjs.Tool.contextKeys.Memory
    ]);
    if (!memory) {
      throw new base_cjs.ToolError(`No context has been provided!`, [], {
        isFatal: true,
        isRetryable: false
      });
    }
    const template = this.options?.template ?? LLMTool.template;
    const output = await this.input.llm.generate([
      message_cjs.BaseMessage.of({
        role: message_cjs.Role.SYSTEM,
        text: template.render({
          task: input.task
        })
      }),
      ...memory.messages.filter((msg) => msg.role !== message_cjs.Role.SYSTEM),
      message_cjs.BaseMessage.of({
        role: message_cjs.Role.USER,
        text: template.render({
          task: input.task
        })
      })
    ]);
    return new base_cjs.StringToolOutput(output.getTextContent());
  }
}

exports.LLMTool = LLMTool;
//# sourceMappingURL=llm.cjs.map
//# sourceMappingURL=llm.cjs.map