import { JSONToolOutput, Tool } from './base.js';
import { z, string } from 'zod';
import { pipe, map, sortBy, prop, take } from 'remeda';
import { Emitter } from '../emitter/emitter.js';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const documentSchema = z.object({
  text: string()
}).passthrough();
class SimilarityToolOutput extends JSONToolOutput {
  static {
    __name(this, "SimilarityToolOutput");
  }
}
class SimilarityTool extends Tool {
  static {
    __name(this, "SimilarityTool");
  }
  name = "Similarity";
  description = "Extract relevant information from documents.";
  emitter = Emitter.root.child({
    namespace: [
      "tool",
      "similarity"
    ],
    creator: this
  });
  inputSchema() {
    return z.object({
      query: z.string(),
      documents: z.array(documentSchema)
    });
  }
  static {
    this.register();
  }
  async _run({ query, documents }, options, run) {
    return pipe(await this.options.provider({
      query,
      documents
    }, options?.provider, run), map(({ score }, idx) => ({
      documentIndex: idx,
      score
    })), sortBy([
      prop("score"),
      "desc"
    ]), take(options?.maxResults ?? this.options.maxResults ?? Infinity), (data) => new SimilarityToolOutput(data.map(({ documentIndex, score }) => ({
      document: documents[documentIndex],
      index: documentIndex,
      score
    }))));
  }
}

export { SimilarityTool, SimilarityToolOutput };
//# sourceMappingURL=similarity.js.map
//# sourceMappingURL=similarity.js.map