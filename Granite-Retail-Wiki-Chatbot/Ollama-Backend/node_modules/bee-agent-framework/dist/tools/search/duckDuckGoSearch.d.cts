import { SearchOptions, search } from 'duck-duck-scrape';
export { SafeSearchType as DuckDuckGoSearchToolSearchType } from 'duck-duck-scrape';
import { Options } from 'p-throttle';
import { SearchToolOptions, SearchToolRunOptions, SearchToolResult, SearchToolOutput } from './base.cjs';
import { Tool, ToolEmitter, ToolInput } from '../base.cjs';
import { NeedleOptions } from 'needle';
import { z } from 'zod';
import { RunContext } from '../../context.cjs';
import 'ajv';
import '../../emitter-DdThRYHg.cjs';
import '../../internals/types.cjs';
import '../../internals/helpers/guards.cjs';
import '../../internals/serializable.cjs';
import '../../internals/helpers/promise.cjs';
import '../../errors.cjs';
import 'promise-based-task';
import '../../cache/base.cjs';
import '../../internals/helpers/schema.cjs';
import 'zod-to-json-schema';

/**
 * Copyright 2024 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface DuckDuckGoSearchToolOptions extends SearchToolOptions {
    search?: SearchOptions;
    throttle?: Options | false;
    httpClientOptions?: NeedleOptions;
    maxResults: number;
}
interface DuckDuckGoSearchToolRunOptions extends SearchToolRunOptions {
    search?: SearchOptions;
    httpClientOptions?: NeedleOptions;
}
interface DuckDuckGoSearchToolResult extends SearchToolResult {
}
declare class DuckDuckGoSearchToolOutput extends SearchToolOutput<DuckDuckGoSearchToolResult> {
    readonly results: DuckDuckGoSearchToolResult[];
    constructor(results: DuckDuckGoSearchToolResult[]);
    createSnapshot(): {
        results: DuckDuckGoSearchToolResult[];
    };
    loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>): void;
}
declare class DuckDuckGoSearchTool extends Tool<DuckDuckGoSearchToolOutput, DuckDuckGoSearchToolOptions, DuckDuckGoSearchToolRunOptions> {
    name: string;
    description: string;
    readonly emitter: ToolEmitter<ToolInput<this>, DuckDuckGoSearchToolOutput>;
    protected readonly client: typeof search;
    inputSchema(): z.ZodObject<{
        query: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        query: string;
    }, {
        query: string;
    }>;
    constructor(options?: Partial<DuckDuckGoSearchToolOptions>);
    protected _createClient(): typeof search;
    protected _run({ query: input }: ToolInput<this>, options: Partial<DuckDuckGoSearchToolRunOptions>, run: RunContext<this>): Promise<DuckDuckGoSearchToolOutput>;
    loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>): void;
}

export { DuckDuckGoSearchTool, type DuckDuckGoSearchToolOptions, DuckDuckGoSearchToolOutput, type DuckDuckGoSearchToolResult, type DuckDuckGoSearchToolRunOptions };
