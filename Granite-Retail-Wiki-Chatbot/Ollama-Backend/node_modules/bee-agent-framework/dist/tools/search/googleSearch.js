import { customsearch_v1 } from '@googleapis/customsearch';
import { SearchToolOutput } from './base.js';
import { Tool } from '../base.js';
import { z } from 'zod';
import { Cache } from '../../cache/decoratorCache.js';
import { ValueError } from '../../errors.js';
import { parseEnv } from '../../internals/env.js';
import { paginate } from '../../internals/helpers/paginate.js';
import { ValidationError } from 'ajv';
import { Emitter } from '../../emitter/emitter.js';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function _ts_decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
__name(_ts_decorate, "_ts_decorate");
function _ts_metadata(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
}
__name(_ts_metadata, "_ts_metadata");
class GoogleSearchToolOutput extends SearchToolOutput {
  static {
    __name(this, "GoogleSearchToolOutput");
  }
  results;
  constructor(results) {
    super(results), this.results = results;
  }
  static {
    this.register();
  }
  createSnapshot() {
    return {
      results: this.results
    };
  }
  loadSnapshot(snapshot) {
    Object.assign(this, snapshot);
  }
}
class GoogleSearchTool extends Tool {
  static {
    __name(this, "GoogleSearchTool");
  }
  name = "GoogleSearch";
  description = `Search for online trends, news, current events, real-time information, or research topics.`;
  emitter = Emitter.root.child({
    namespace: [
      "tool",
      "search",
      "google"
    ],
    creator: this
  });
  inputSchema() {
    return z.object({
      query: z.string({
        description: `Search query`
      }).min(1).max(2048)
    });
  }
  apiKey;
  cseId;
  constructor(options = {
    maxResults: 10
  }) {
    super(options);
    this.apiKey = options.apiKey || parseEnv("GOOGLE_API_KEY", z.string());
    this.cseId = options.cseId || parseEnv("GOOGLE_CSE_ID", z.string());
    if (!this.apiKey || !this.cseId) {
      throw new ValueError([
        `"apiKey" or "cseId" must both be provided.`,
        `Either set them directly or put them in ENV ("GOOGLE_API_KEY" / "GOOGLE_CSE_ID")`
      ].join("\n"));
    }
    if (options.maxResults < 1 || options.maxResults > 100) {
      throw new ValidationError([
        {
          message: "Property 'maxResults' must be between 1 and 100",
          propertyName: "options.maxResults"
        }
      ]);
    }
  }
  get client() {
    return new customsearch_v1.Customsearch({
      auth: this.apiKey
    });
  }
  static {
    this.register();
  }
  async _run({ query: input }, _options, run) {
    const results = await paginate({
      size: this.options.maxResults,
      handler: /* @__PURE__ */ __name(async ({ offset, limit }) => {
        const maxChunkSize = 10;
        const { data: { items = [] } } = await this.client.cse.list({
          cx: this.cseId,
          q: input,
          start: offset,
          num: Math.min(limit, maxChunkSize),
          safe: "active"
        }, {
          signal: run.signal
        });
        return {
          data: items,
          done: items.length < maxChunkSize
        };
      }, "handler")
    });
    return new GoogleSearchToolOutput(results.map((result) => ({
      title: result.title || "",
      description: result.snippet || "",
      url: result.link || ""
    })));
  }
  createSnapshot() {
    return {
      ...super.createSnapshot(),
      apiKey: this.apiKey,
      cseId: this.cseId
    };
  }
  loadSnapshot({ apiKey, cseId, ...snapshot }) {
    super.loadSnapshot(snapshot);
    Object.assign(this, {
      apiKey,
      cseId
    });
  }
}
_ts_decorate([
  Cache(),
  _ts_metadata("design:type", Function),
  _ts_metadata("design:paramtypes", []),
  _ts_metadata("design:returntype", void 0)
], GoogleSearchTool.prototype, "inputSchema", null);
_ts_decorate([
  Cache(),
  _ts_metadata("design:type", typeof customsearch_v1 === "undefined" || typeof customsearch_v1.Customsearch === "undefined" ? Object : customsearch_v1.Customsearch),
  _ts_metadata("design:paramtypes", [])
], GoogleSearchTool.prototype, "client", null);

export { GoogleSearchTool, GoogleSearchToolOutput };
//# sourceMappingURL=googleSearch.js.map
//# sourceMappingURL=googleSearch.js.map