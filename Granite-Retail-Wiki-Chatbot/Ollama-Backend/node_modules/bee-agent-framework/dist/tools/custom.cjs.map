{"version":3,"sources":["../../src/tools/custom.ts"],"names":["CustomToolCreateError","FrameworkError","CustomToolExecuteError","toolOptionsSchema","z","object","codeInterpreter","url","string","connectionOptions","any","optional","sourceCode","min","name","description","inputSchema","executorId","nullable","passthrough","createCodeInterpreterClient","createPromiseClient","CodeInterpreterService","createGrpcTransport","baseUrl","httpVersion","nodeOptions","CustomTool","Tool","emitter","Emitter","root","child","namespace","creator","options","client","register","validate","_run","input","_options","run","response","executeCustomTool","toolSourceCode","toolInputJson","JSON","stringify","signal","case","value","stderr","StringToolOutput","toolOutputJson","loadSnapshot","snapshot","fromSourceCode","parseCustomTool","errorMessages","join","toolName","toolDescription","toolInputSchemaJson","parse"],"mappings":"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","file":"custom.cjs","sourcesContent":["/**\n * Copyright 2024 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaseToolOptions,\n  BaseToolRunOptions,\n  ToolEmitter,\n  StringToolOutput,\n  Tool,\n  ToolInput,\n} from \"@/tools/base.js\";\nimport { createGrpcTransport } from \"@connectrpc/connect-node\";\nimport { PromiseClient, createPromiseClient } from \"@connectrpc/connect\";\nimport { FrameworkError } from \"@/errors.js\";\nimport { z } from \"zod\";\nimport { validate } from \"@/internals/helpers/general.js\";\nimport { CodeInterpreterService } from \"bee-proto/code_interpreter/v1/code_interpreter_service_connect\";\nimport { CodeInterpreterOptions } from \"./python/python.js\";\nimport { RunContext } from \"@/context.js\";\nimport { Emitter } from \"@/emitter/emitter.js\";\n\nexport class CustomToolCreateError extends FrameworkError {}\nexport class CustomToolExecuteError extends FrameworkError {}\n\nconst toolOptionsSchema = z\n  .object({\n    codeInterpreter: z.object({\n      url: z.string().url(),\n      connectionOptions: z.any().optional(),\n    }),\n    sourceCode: z.string().min(1),\n    name: z.string().min(1),\n    description: z.string().min(1),\n    inputSchema: z.any(),\n    executorId: z.string().nullable().optional(),\n  })\n  .passthrough();\n\nexport type CustomToolOptions = z.output<typeof toolOptionsSchema> & BaseToolOptions;\n\nfunction createCodeInterpreterClient(codeInterpreter: CodeInterpreterOptions) {\n  return createPromiseClient(\n    CodeInterpreterService,\n    createGrpcTransport({\n      baseUrl: codeInterpreter.url,\n      httpVersion: \"2\",\n      nodeOptions: codeInterpreter.connectionOptions,\n    }),\n  );\n}\n\nexport class CustomTool extends Tool<StringToolOutput, CustomToolOptions> {\n  name: string;\n  description: string;\n\n  public readonly emitter: ToolEmitter<ToolInput<this>, StringToolOutput> = Emitter.root.child({\n    namespace: [\"tool\", \"custom\"],\n    creator: this,\n  });\n\n  public inputSchema() {\n    return this.options.inputSchema;\n  }\n\n  protected client: PromiseClient<typeof CodeInterpreterService>;\n\n  static {\n    this.register();\n  }\n\n  public constructor(\n    options: CustomToolOptions,\n    client?: PromiseClient<typeof CodeInterpreterService>,\n  ) {\n    validate(options, toolOptionsSchema);\n    super(options);\n    this.client = client || createCodeInterpreterClient(options.codeInterpreter);\n    this.name = options.name;\n    this.description = options.description;\n  }\n\n  protected async _run(\n    input: any,\n    _options: Partial<BaseToolRunOptions>,\n    run: RunContext<typeof this>,\n  ) {\n    const { response } = await this.client.executeCustomTool(\n      {\n        executorId: this.options.executorId || \"default\",\n        toolSourceCode: this.options.sourceCode,\n        toolInputJson: JSON.stringify(input),\n      },\n      { signal: run.signal },\n    );\n\n    if (response.case === \"error\") {\n      throw new CustomToolExecuteError(response.value.stderr);\n    }\n\n    return new StringToolOutput(response.value!.toolOutputJson);\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>): void {\n    super.loadSnapshot(snapshot);\n    this.client = createCodeInterpreterClient(this.options.codeInterpreter);\n  }\n\n  static async fromSourceCode(\n    codeInterpreter: CodeInterpreterOptions,\n    sourceCode: string,\n    executorId?: string,\n  ) {\n    const client = createCodeInterpreterClient(codeInterpreter);\n    const response = await client.parseCustomTool({ toolSourceCode: sourceCode });\n\n    if (response.response.case === \"error\") {\n      throw new CustomToolCreateError(response.response.value.errorMessages.join(\"\\n\"));\n    }\n\n    const { toolName, toolDescription, toolInputSchemaJson } = response.response.value!;\n\n    return new CustomTool(\n      {\n        codeInterpreter,\n        sourceCode,\n        name: toolName,\n        description: toolDescription,\n        inputSchema: JSON.parse(toolInputSchemaJson),\n        executorId,\n      },\n      client,\n    );\n  }\n}\n"]}