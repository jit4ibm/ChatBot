{"version":3,"sources":["../../src/cache/unconstrainedCache.ts"],"names":["UnconstrainedCache","BaseCache","provider","Map","register","get","key","has","clear","delete","set","value","size","createSnapshot","enabled","loadSnapshot","snapshot","Object","assign"],"mappings":";;;;;;AAkBO,MAAMA,2BAA8BC,kBAAAA,CAAAA;EAlB3C;;;AAmBqBC,EAAAA,QAAAA,uBAAeC,GAAAA,EAAAA;EAElC;AACE,IAAA,IAAA,CAAKC,QAAQ,EAAA;AACf;AAEA,EAAA,MAAMC,IAAIC,GAAa,EAAA;AACrB,IAAO,OAAA,IAAA,CAAKJ,QAASG,CAAAA,GAAAA,CAAIC,GAAAA,CAAAA;AAC3B;AAEA,EAAA,MAAMC,IAAID,GAAa,EAAA;AACrB,IAAO,OAAA,IAAA,CAAKJ,QAASK,CAAAA,GAAAA,CAAID,GAAAA,CAAAA;AAC3B;AAEA,EAAA,MAAME,KAAQ,GAAA;AACZ,IAAA,IAAA,CAAKN,SAASM,KAAK,EAAA;AACrB;AAEA,EAAA,MAAMC,OAAOH,GAAa,EAAA;AACxB,IAAO,OAAA,IAAA,CAAKJ,QAASO,CAAAA,MAAAA,CAAOH,GAAAA,CAAAA;AAC9B;EAEA,MAAMI,GAAAA,CAAIJ,KAAaK,KAAU,EAAA;AAC/B,IAAKT,IAAAA,CAAAA,QAAAA,CAASQ,GAAIJ,CAAAA,GAAAA,EAAKK,KAAAA,CAAAA;AACzB;AAEA,EAAA,MAAMC,IAAO,GAAA;AACX,IAAA,OAAO,KAAKV,QAASU,CAAAA,IAAAA;AACvB;EAEAC,cAAiB,GAAA;AACf,IAAO,OAAA;AACLC,MAAAA,OAAAA,EAAS,IAAKA,CAAAA,OAAAA;AACdZ,MAAAA,QAAAA,EAAU,IAAKA,CAAAA;AACjB,KAAA;AACF;AAEAa,EAAAA,YAAAA,CAAaC,QAAkD,EAAA;AAC7DC,IAAOC,MAAAA,CAAAA,MAAAA,CAAO,MAAMF,QAAAA,CAAAA;AACtB;AACF","file":"unconstrainedCache.cjs","sourcesContent":["/**\n * Copyright 2024 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { BaseCache } from \"@/cache/base.js\";\n\nexport class UnconstrainedCache<T> extends BaseCache<T> {\n  protected readonly provider = new Map<string, T>();\n\n  static {\n    this.register();\n  }\n\n  async get(key: string) {\n    return this.provider.get(key);\n  }\n\n  async has(key: string) {\n    return this.provider.has(key);\n  }\n\n  async clear() {\n    this.provider.clear();\n  }\n\n  async delete(key: string) {\n    return this.provider.delete(key);\n  }\n\n  async set(key: string, value: T) {\n    this.provider.set(key, value);\n  }\n\n  async size() {\n    return this.provider.size;\n  }\n\n  createSnapshot() {\n    return {\n      enabled: this.enabled,\n      provider: this.provider,\n    };\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>) {\n    Object.assign(this, snapshot);\n  }\n}\n"]}