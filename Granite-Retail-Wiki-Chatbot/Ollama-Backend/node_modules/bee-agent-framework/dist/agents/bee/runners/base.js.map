{"version":3,"sources":["../../../../src/agents/bee/runners/base.ts"],"names":["BaseRunner","Serializable","memory","iterations","failedAttemptsCounter","constructor","input","options","run","RetryCounter","execution","totalMaxRetries","AgentError","createIteration","meta","iteration","length","maxIterations","Infinity","isFatal","emitter","child","groupId","llm","signal","push","state","init","initMemory","createSnapshot","shallowCopy","loadSnapshot","snapshot","Object","assign"],"mappings":";;;;;;;AA+CO,MAAeA,mBAAmBC,YAAAA,CAAAA;EA/CzC;;;;;;AAgDSC,EAAAA,MAAAA;AACSC,EAAAA,UAAAA;AACGC,EAAAA,qBAAAA;EAEnBC,WACqBC,CAAAA,KAAAA,EACAC,SACAC,GACnB,EAAA;AACA,IAAA,KAAA,EAAK,EAAA,IAAA,CAJcF,KAAAA,GAAAA,KAAAA,EAAAA,IACAC,CAAAA,OAAAA,GAAAA,OAAAA,EAAAA,IAAAA,CACAC,GAAAA,GAAAA,GAAAA,EAAAA,IANLL,CAAAA,UAAAA,GAAqC,EAAA;AASnD,IAAA,IAAA,CAAKC,wBAAwB,IAAIK,YAAAA,CAAaF,OAASG,EAAAA,SAAAA,EAAWC,iBAAiBC,UAAAA,CAAAA;AACrF;AAEA,EAAA,MAAMC,eAAkB,GAAA;AACtB,IAAA,MAAMC,IAAgB,GAAA;MAAEC,SAAW,EAAA,IAAA,CAAKZ,WAAWa,MAAS,GAAA;AAAE,KAAA;AAC9D,IAAA,MAAMC,aAAgB,GAAA,IAAA,CAAKV,OAASG,EAAAA,SAAAA,EAAWO,aAAiBC,IAAAA,QAAAA;AAEhE,IAAIJ,IAAAA,IAAAA,CAAKC,YAAYE,aAAe,EAAA;AAClC,MAAA,MAAM,IAAIL,UACR,CAAA,CAAA,0CAAA,EAA6CK,aAAAA,CAAAA,YAAAA,CAAAA,EAC7C,EACA,EAAA;QAAEE,OAAS,EAAA;OAAK,CAAA;AAEpB;AAEA,IAAA,MAAMC,OAAU,GAAA,IAAA,CAAKZ,GAAIY,CAAAA,OAAAA,CAAQC,KAAM,CAAA;MAAEC,OAAS,EAAA,CAAA,UAAA,EAAaR,KAAKC,SAAS,CAAA;KAAG,CAAA;AAChF,IAAMA,MAAAA,SAAAA,GAAY,MAAM,IAAA,CAAKQ,GAAI,CAAA;AAAEH,MAAAA,OAAAA;AAASI,MAAAA,MAAAA,EAAQ,KAAKhB,GAAIgB,CAAAA,MAAAA;AAAQV,MAAAA;KAAK,CAAA;AAC1E,IAAKX,IAAAA,CAAAA,UAAAA,CAAWsB,KAAKV,SAAAA,CAAAA;AAErB,IAAO,OAAA;AACLK,MAAAA,OAAAA;AACAM,MAAAA,KAAAA,EAAOX,SAAUW,CAAAA,KAAAA;AACjBZ,MAAAA,IAAAA;AACAU,MAAAA,MAAAA,EAAQ,KAAKhB,GAAIgB,CAAAA;AACnB,KAAA;AACF;AAEA,EAAA,MAAMG,KAAKrB,KAAoB,EAAA;AAC7B,IAAA,IAAA,CAAKJ,MAAS,GAAA,MAAM,IAAK0B,CAAAA,UAAAA,CAAWtB,KAAAA,CAAAA;AACtC;EAUAuB,cAAiB,GAAA;AACf,IAAO,OAAA;MACLvB,KAAOwB,EAAAA,WAAAA,CAAY,KAAKxB,KAAK,CAAA;MAC7BC,OAASuB,EAAAA,WAAAA,CAAY,KAAKvB,OAAO,CAAA;AACjCL,MAAAA,MAAAA,EAAQ,IAAKA,CAAAA,MAAAA;AACbE,MAAAA,qBAAAA,EAAuB,IAAKA,CAAAA;AAC9B,KAAA;AACF;AAEA2B,EAAAA,YAAAA,CAAaC,QAAkD,EAAA;AAC7DC,IAAOC,MAAAA,CAAAA,MAAAA,CAAO,MAAMF,QAAAA,CAAAA;AACtB;AACF","file":"base.js","sourcesContent":["/**\n * Copyright 2024 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Serializable } from \"@/internals/serializable.js\";\nimport {\n  BeeAgentRunIteration,\n  BeeAgentTemplates,\n  BeeCallbacks,\n  BeeIterationToolResult,\n  BeeMeta,\n  BeeRunInput,\n  BeeRunOptions,\n} from \"@/agents/bee/types.js\";\nimport type { BeeAgent, BeeInput } from \"@/agents/bee/agent.js\";\nimport { RetryCounter } from \"@/internals/helpers/counter.js\";\nimport { AgentError } from \"@/agents/base.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport { BaseMemory } from \"@/memory/base.js\";\nimport { GetRunContext } from \"@/context.js\";\nimport { Emitter } from \"@/emitter/emitter.js\";\n\nexport interface BeeRunnerLLMInput {\n  meta: BeeMeta;\n  signal: AbortSignal;\n  emitter: Emitter<BeeCallbacks>;\n}\n\nexport interface BeeRunnerToolInput {\n  state: BeeIterationToolResult;\n  meta: BeeMeta;\n  signal: AbortSignal;\n  emitter: Emitter<BeeCallbacks>;\n}\n\nexport abstract class BaseRunner extends Serializable {\n  public memory!: BaseMemory;\n  public readonly iterations: BeeAgentRunIteration[] = [];\n  protected readonly failedAttemptsCounter: RetryCounter;\n\n  constructor(\n    protected readonly input: BeeInput,\n    protected readonly options: BeeRunOptions,\n    protected readonly run: GetRunContext<BeeAgent>,\n  ) {\n    super();\n    this.failedAttemptsCounter = new RetryCounter(options?.execution?.totalMaxRetries, AgentError);\n  }\n\n  async createIteration() {\n    const meta: BeeMeta = { iteration: this.iterations.length + 1 };\n    const maxIterations = this.options?.execution?.maxIterations ?? Infinity;\n\n    if (meta.iteration > maxIterations) {\n      throw new AgentError(\n        `Agent was not able to resolve the task in ${maxIterations} iterations.`,\n        [],\n        { isFatal: true },\n      );\n    }\n\n    const emitter = this.run.emitter.child({ groupId: `iteration-${meta.iteration}` });\n    const iteration = await this.llm({ emitter, signal: this.run.signal, meta });\n    this.iterations.push(iteration);\n\n    return {\n      emitter,\n      state: iteration.state,\n      meta,\n      signal: this.run.signal,\n    };\n  }\n\n  async init(input: BeeRunInput) {\n    this.memory = await this.initMemory(input);\n  }\n\n  abstract llm(input: BeeRunnerLLMInput): Promise<BeeAgentRunIteration>;\n\n  abstract tool(input: BeeRunnerToolInput): Promise<{ output: string; success: boolean }>;\n\n  abstract get templates(): BeeAgentTemplates;\n\n  protected abstract initMemory(input: BeeRunInput): Promise<BaseMemory>;\n\n  createSnapshot() {\n    return {\n      input: shallowCopy(this.input),\n      options: shallowCopy(this.options),\n      memory: this.memory,\n      failedAttemptsCounter: this.failedAttemptsCounter,\n    };\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>) {\n    Object.assign(this, snapshot);\n  }\n}\n"]}