'use strict';

var message_cjs = require('../../../../llms/primitives/message.cjs');
var remeda = require('remeda');
var runner_cjs = require('../default/runner.cjs');
var prompts_cjs = require('./prompts.cjs');
var decoratorCache_cjs = require('../../../../cache/decoratorCache.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function _ts_decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
__name(_ts_decorate, "_ts_decorate");
function _ts_metadata(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
}
__name(_ts_metadata, "_ts_metadata");
class GraniteRunner extends runner_cjs.DefaultRunner {
  static {
    __name(this, "GraniteRunner");
  }
  static {
    this.register();
  }
  constructor(input, options, run) {
    super(input, options, run);
    run.emitter.on("update", async ({ update, meta, memory }) => {
      if (update.key === "tool_output") {
        await memory.add(message_cjs.BaseMessage.of({
          role: "tool_response",
          text: update.value,
          meta: {
            success: meta.success
          }
        }));
      }
    }, {
      isBlocking: true
    });
  }
  async initMemory(input) {
    const memory = await super.initMemory(input);
    if (!remeda.isEmpty(this.input.tools)) {
      const index = memory.messages.findIndex((msg) => msg.role === message_cjs.Role.SYSTEM) + 1;
      await memory.add(message_cjs.BaseMessage.of({
        role: "tools",
        text: JSON.stringify((await this.renderers.system.variables.tools()).map((tool) => ({
          name: tool.name,
          description: tool.description,
          schema: JSON.parse(tool.schema)
        })), null, 4)
      }), index);
    }
    return memory;
  }
  get templates() {
    const customTemplates = this.input.templates ?? {};
    return {
      ...super.templates,
      user: customTemplates.user ?? prompts_cjs.GraniteBeeUserPrompt,
      system: customTemplates.system ?? prompts_cjs.GraniteBeeSystemPrompt,
      assistant: customTemplates.assistant ?? prompts_cjs.GraniteBeeAssistantPrompt,
      schemaError: customTemplates.schemaError ?? prompts_cjs.GraniteBeeSchemaErrorPrompt,
      toolNotFoundError: customTemplates.toolNotFoundError ?? prompts_cjs.GraniteBeeToolNotFoundPrompt,
      toolError: customTemplates.toolError ?? prompts_cjs.GraniteBeeToolErrorPrompt,
      toolInputError: customTemplates.toolInputError ?? prompts_cjs.GraniteBeeToolInputErrorPrompt
    };
  }
  createParser(tools) {
    const { parser } = super.createParser(tools);
    return {
      parserRegex: remeda.isEmpty(tools) ? new RegExp(`Thought: .+\\nFinal Answer: [\\s\\S]+`) : new RegExp(`Thought: .+\\n(?:Final Answer: [\\s\\S]+|Tool Name: (${tools.map((tool) => tool.name).join("|")})\\nTool Input: \\{.*\\})`),
      parser: parser.fork((nodes, options) => ({
        options,
        nodes: {
          ...nodes,
          thought: {
            ...nodes.thought,
            prefix: "Thought:"
          },
          tool_name: {
            ...nodes.tool_name,
            prefix: "Tool Name:"
          },
          tool_input: {
            ...nodes.tool_input,
            prefix: "Tool Input:",
            isEnd: true,
            next: []
          },
          final_answer: {
            ...nodes.final_answer,
            prefix: "Final Answer:"
          }
        }
      }))
    };
  }
}
_ts_decorate([
  decoratorCache_cjs.Cache({
    enumerable: false
  }),
  _ts_metadata("design:type", typeof BeeAgentTemplates === "undefined" ? Object : BeeAgentTemplates),
  _ts_metadata("design:paramtypes", [])
], GraniteRunner.prototype, "templates", null);

exports.GraniteRunner = GraniteRunner;
//# sourceMappingURL=runner.cjs.map
//# sourceMappingURL=runner.cjs.map