import * as zod from 'zod';
import { ZodSchema } from 'zod';
import { Serializable } from '../../internals/serializable.js';
import { JSONParser } from '@streamparser/json';
import { jsonrepairTransform } from 'jsonrepair/stream';
import '../../internals/types.js';
import '../../internals/helpers/guards.js';

declare class ZodParserField<T> extends ParserField<T, string> {
    protected readonly schema: ZodSchema<T>;
    constructor(schema: ZodSchema<T>);
    get(): T;
    getPartial(): string;
    createSnapshot(): {
        schema: ZodSchema<T, zod.ZodTypeDef, T>;
        raw: string;
    };
}
declare class JSONParserField<T> extends ParserField<T, Partial<T>> {
    protected readonly input: {
        schema: ZodSchema<T>;
        base: Partial<T>;
        matchPair?: [string, string];
    };
    protected stream: ReturnType<typeof jsonrepairTransform>;
    protected jsonParser: JSONParser;
    protected errored: boolean;
    protected ref: {
        value: Partial<T>;
    };
    constructor(input: {
        schema: ZodSchema<T>;
        base: Partial<T>;
        matchPair?: [string, string];
    });
    protected init(): void;
    write(chunk: string): void;
    get(): T;
    getPartial(): Partial<T>;
    end(): Promise<void>;
    createSnapshot(): {
        input: {
            schema: ZodSchema<T>;
            base: Partial<T>;
            matchPair?: [string, string];
        };
        errored: boolean;
        raw: string;
    };
    loadSnapshot({ raw, ...snapshot }: ReturnType<typeof this.createSnapshot>): void;
}
declare abstract class ParserField<T, TPartial> extends Serializable {
    raw: string;
    abstract get(): T;
    abstract getPartial(): TPartial;
    write(chunk: string): void;
    end(): Promise<void>;
    createSnapshot(): {
        raw: string;
    };
    loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>): void;
}
declare namespace ParserField {
    type inferValue<T> = T extends ParserField<infer L, unknown> ? L : never;
    type inferPartialValue<T> = T extends ParserField<any, infer L> ? L : never;
}

export { JSONParserField, ParserField, ZodParserField };
