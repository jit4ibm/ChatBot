{"version":3,"sources":["../../src/instrumentation/tracer.ts"],"names":["tracer","opentelemetry","trace","getTracer","Version","activeTracesMap","Map","buildSpansForParent","spans","parentId","filter","fwSpan","parent_id","forEach","startActiveSpan","context","span_id","startTime","start_time","attributes","target","name","data","JSON","stringify","ctx","activeSpan","setStatus","status","end","end_time","buildTraceTree","prompt","history","generatedMessage","traceId","version","runErrorSpanKey","endTime","source","undefined","response","runErrorSpan","find","span","code","SpanStatusCode","OK"],"mappings":"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","file":"tracer.js","sourcesContent":["/**\n * Copyright 2024 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Version } from \"@/version.js\";\nimport opentelemetry, { SpanStatusCode, TimeInput } from \"@opentelemetry/api\";\nimport { FrameworkSpan, GeneratedResponse } from \"./types.js\";\n\nexport const tracer = opentelemetry.trace.getTracer(\"bee-agent-framework\", Version);\n\nexport const activeTracesMap = new Map<string, string>();\n\ninterface ComputeTreeProps {\n  prompt?: string | null;\n  history: GeneratedResponse[] | undefined;\n  generatedMessage: GeneratedResponse | undefined;\n  spans: FrameworkSpan[];\n  traceId: string;\n  version: string;\n  runErrorSpanKey: string;\n  startTime: TimeInput;\n  endTime: TimeInput;\n  source: string;\n}\n\ninterface BuildSpansForParentProps {\n  spans: FrameworkSpan[];\n  parentId: string | undefined;\n}\n\nfunction buildSpansForParent({ spans, parentId }: BuildSpansForParentProps) {\n  spans\n    .filter((fwSpan) => fwSpan.parent_id === parentId)\n    .forEach((fwSpan) => {\n      tracer.startActiveSpan(\n        fwSpan.context.span_id,\n        {\n          // custom start time\n          startTime: fwSpan.start_time,\n          // set span important attributes\n          attributes: {\n            target: fwSpan.attributes.target,\n            name: fwSpan.name,\n            ...(fwSpan.attributes.data && { data: JSON.stringify(fwSpan.attributes.data) }),\n            ...(fwSpan.attributes.ctx && { ctx: JSON.stringify(fwSpan.attributes.ctx) }),\n          },\n        },\n        (activeSpan) => {\n          // set status\n          activeSpan.setStatus(fwSpan.status);\n\n          // set nested spans\n          buildSpansForParent({ spans, parentId: fwSpan.context.span_id });\n\n          // finish the span\n          activeSpan.end(fwSpan.end_time);\n        },\n      );\n    });\n}\n\nexport function buildTraceTree({\n  prompt,\n  history,\n  generatedMessage,\n  spans,\n  traceId,\n  version,\n  runErrorSpanKey,\n  startTime,\n  endTime,\n  source,\n}: ComputeTreeProps) {\n  tracer.startActiveSpan(\n    `bee-agent-framework-${source}-${traceId}`,\n    {\n      // custom start time\n      startTime,\n      // set main span important attributes\n      attributes: {\n        traceId,\n        version,\n        ...(prompt && { prompt }),\n        ...(generatedMessage !== undefined && { response: JSON.stringify(generatedMessage) }),\n        ...(history && { history: JSON.stringify(history) }),\n      },\n    },\n    (activeSpan) => {\n      // set status\n      const runErrorSpan = spans.find((span) => span.attributes.target === runErrorSpanKey);\n      if (runErrorSpan) {\n        activeSpan.setStatus(runErrorSpan.status);\n      } else {\n        activeSpan.setStatus({ code: SpanStatusCode.OK });\n      }\n\n      // set nested spans\n      buildSpansForParent({ spans, parentId: undefined });\n\n      // finish the main span with custom end time\n      activeSpan.end(endTime);\n    },\n  );\n}\n"]}