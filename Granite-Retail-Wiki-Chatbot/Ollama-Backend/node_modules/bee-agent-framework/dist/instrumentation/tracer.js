import { Version } from '../version.js';
import opentelemetry, { SpanStatusCode } from '@opentelemetry/api';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const tracer = opentelemetry.trace.getTracer("bee-agent-framework", Version);
const activeTracesMap = /* @__PURE__ */ new Map();
function buildSpansForParent({ spans, parentId }) {
  spans.filter((fwSpan) => fwSpan.parent_id === parentId).forEach((fwSpan) => {
    tracer.startActiveSpan(fwSpan.context.span_id, {
      // custom start time
      startTime: fwSpan.start_time,
      // set span important attributes
      attributes: {
        target: fwSpan.attributes.target,
        name: fwSpan.name,
        ...fwSpan.attributes.data && {
          data: JSON.stringify(fwSpan.attributes.data)
        },
        ...fwSpan.attributes.ctx && {
          ctx: JSON.stringify(fwSpan.attributes.ctx)
        }
      }
    }, (activeSpan) => {
      activeSpan.setStatus(fwSpan.status);
      buildSpansForParent({
        spans,
        parentId: fwSpan.context.span_id
      });
      activeSpan.end(fwSpan.end_time);
    });
  });
}
__name(buildSpansForParent, "buildSpansForParent");
function buildTraceTree({ prompt, history, generatedMessage, spans, traceId, version, runErrorSpanKey, startTime, endTime, source }) {
  tracer.startActiveSpan(`bee-agent-framework-${source}-${traceId}`, {
    // custom start time
    startTime,
    // set main span important attributes
    attributes: {
      traceId,
      version,
      ...prompt && {
        prompt
      },
      ...generatedMessage !== void 0 && {
        response: JSON.stringify(generatedMessage)
      },
      ...history && {
        history: JSON.stringify(history)
      }
    }
  }, (activeSpan) => {
    const runErrorSpan = spans.find((span) => span.attributes.target === runErrorSpanKey);
    if (runErrorSpan) {
      activeSpan.setStatus(runErrorSpan.status);
    } else {
      activeSpan.setStatus({
        code: SpanStatusCode.OK
      });
    }
    buildSpansForParent({
      spans,
      parentId: void 0
    });
    activeSpan.end(endTime);
  });
}
__name(buildTraceTree, "buildTraceTree");

export { activeTracesMap, buildTraceTree, tracer };
//# sourceMappingURL=tracer.js.map
//# sourceMappingURL=tracer.js.map