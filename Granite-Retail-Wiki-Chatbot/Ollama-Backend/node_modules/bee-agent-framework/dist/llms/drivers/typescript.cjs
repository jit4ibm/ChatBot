'use strict';

var schema_cjs = require('../../internals/helpers/schema.cjs');
var template_cjs = require('../../template.cjs');
var base_cjs = require('./base.cjs');
var jsonSchemaToTypescript = require('json-schema-to-typescript');
var zod = require('zod');

function _interopNamespace(e) {
  if (e && e.__esModule) return e;
  var n = Object.create(null);
  if (e) {
    Object.keys(e).forEach(function (k) {
      if (k !== 'default') {
        var d = Object.getOwnPropertyDescriptor(e, k);
        Object.defineProperty(n, k, d.get ? d : {
          enumerable: true,
          get: function () { return e[k]; }
        });
      }
    });
  }
  n.default = e;
  return Object.freeze(n);
}

var jsonSchemaToTypescript__namespace = /*#__PURE__*/_interopNamespace(jsonSchemaToTypescript);

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
class TypescriptDriver extends base_cjs.BaseDriver {
  static {
    __name(this, "TypescriptDriver");
  }
  template = new template_cjs.PromptTemplate({
    schema: zod.z.object({
      schema: zod.z.string()
    }),
    template: `You are a helpful assistant that generates only valid JSON adhering to the following TypeScript type.

\`\`\`
{{schema}}
\`\`\`

IMPORTANT: Every message must be a parsable JSON string without additional output.
`
  });
  static {
    this.register();
  }
  parseResponse(textResponse) {
    return schema_cjs.parseBrokenJson(textResponse);
  }
  async schemaToString(schema) {
    return await jsonSchemaToTypescript__namespace.compile(schema, "Output");
  }
  guided(schema) {
    return {
      json: schema
    };
  }
}

exports.TypescriptDriver = TypescriptDriver;
//# sourceMappingURL=typescript.cjs.map
//# sourceMappingURL=typescript.cjs.map