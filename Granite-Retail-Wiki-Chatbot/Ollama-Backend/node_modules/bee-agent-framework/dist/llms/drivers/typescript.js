import { parseBrokenJson } from '../../internals/helpers/schema.js';
import { PromptTemplate } from '../../template.js';
import { BaseDriver } from './base.js';
import * as jsonSchemaToTypescript from 'json-schema-to-typescript';
import { z } from 'zod';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
class TypescriptDriver extends BaseDriver {
  static {
    __name(this, "TypescriptDriver");
  }
  template = new PromptTemplate({
    schema: z.object({
      schema: z.string()
    }),
    template: `You are a helpful assistant that generates only valid JSON adhering to the following TypeScript type.

\`\`\`
{{schema}}
\`\`\`

IMPORTANT: Every message must be a parsable JSON string without additional output.
`
  });
  static {
    this.register();
  }
  parseResponse(textResponse) {
    return parseBrokenJson(textResponse);
  }
  async schemaToString(schema) {
    return await jsonSchemaToTypescript.compile(schema, "Output");
  }
  guided(schema) {
    return {
      json: schema
    };
  }
}

export { TypescriptDriver };
//# sourceMappingURL=typescript.js.map
//# sourceMappingURL=typescript.js.map