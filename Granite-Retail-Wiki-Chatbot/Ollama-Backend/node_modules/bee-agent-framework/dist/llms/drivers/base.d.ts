import { GenerateOptions } from '../base.js';
import { ChatLLMOutput, ChatLLM } from '../chat.js';
import { BaseMessage } from '../primitives/message.js';
import { PromptTemplate } from '../../template.js';
import { SchemaObject } from 'ajv';
import { ZodTypeAny, TypeOf, z } from 'zod';
import { Serializable } from '../../internals/serializable.js';
import '../../context.js';
import '../../emitter-DRfJC1TP.js';
import '../../internals/types.js';
import '../../internals/helpers/guards.js';
import '../../internals/helpers/promise.js';
import '../../errors.js';
import '../../cache/base.js';
import 'promise-based-task';

/**
 * Copyright 2024 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface GenerateSchemaInput<T> {
    maxRetries?: number;
    options?: T;
}
interface DriverResponse<T> {
    raw: ChatLLMOutput;
    parsed: T extends ZodTypeAny ? TypeOf<T> : T;
    messages: BaseMessage[];
}
declare abstract class BaseDriver<TGenerateOptions extends GenerateOptions = GenerateOptions> extends Serializable<any> {
    protected readonly llm: ChatLLM<ChatLLMOutput, TGenerateOptions>;
    protected abstract template: PromptTemplate.infer<{
        schema: string;
    }>;
    protected errorTemplate: PromptTemplate<z.ZodObject<{
        errors: z.ZodString;
        expected: z.ZodString;
        received: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        expected: string;
        received: string;
        errors: string;
    }, {
        expected: string;
        received: string;
        errors: string;
    }>>;
    constructor(llm: ChatLLM<ChatLLMOutput, TGenerateOptions>);
    protected abstract parseResponse(textResponse: string): unknown;
    protected abstract schemaToString(schema: SchemaObject): Promise<string> | string;
    protected guided(schema: SchemaObject): GenerateOptions["guided"] | undefined;
    generate<T = any>(schema: T extends ZodTypeAny ? T : SchemaObject, input: BaseMessage[], { maxRetries, options }?: GenerateSchemaInput<TGenerateOptions>): Promise<DriverResponse<T>>;
    createSnapshot(): {
        template: PromptTemplate.infer<{
            schema: string;
        }>;
        errorTemplate: PromptTemplate<z.ZodObject<{
            errors: z.ZodString;
            expected: z.ZodString;
            received: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            expected: string;
            received: string;
            errors: string;
        }, {
            expected: string;
            received: string;
            errors: string;
        }>>;
    };
    loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>): void;
}

export { BaseDriver, type DriverResponse, type GenerateSchemaInput };
