import { BaseLLMEvents, BaseLLMOutput, GenerateOptions, BaseLLM } from './base.js';
import { BaseMessage } from './primitives/message.js';
import { E as Emitter } from '../emitter-DRfJC1TP.js';
import '../context.js';
import '../internals/serializable.js';
import '../internals/types.js';
import '../internals/helpers/guards.js';
import '../internals/helpers/promise.js';
import '../errors.js';
import '../cache/base.js';
import 'promise-based-task';

/**
 * Copyright 2024 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

type ChatLLMGenerateEvents<TOutput extends ChatLLMOutput = ChatLLMOutput> = BaseLLMEvents<BaseMessage[], TOutput>;
declare abstract class ChatLLMOutput extends BaseLLMOutput {
    abstract get messages(): readonly BaseMessage[];
}
declare abstract class ChatLLM<TOutput extends ChatLLMOutput, TGenerateOptions extends GenerateOptions = GenerateOptions> extends BaseLLM<BaseMessage[], TOutput, TGenerateOptions> {
    abstract readonly emitter: Emitter<ChatLLMGenerateEvents<TOutput>>;
}
type AnyChatLLM = ChatLLM<ChatLLMOutput>;

export { type AnyChatLLM, ChatLLM, type ChatLLMGenerateEvents, ChatLLMOutput };
