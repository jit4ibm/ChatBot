import { isString } from 'remeda';
import { Serializer } from '../../serializer/serializer.js';
import { VertexAI } from '@google-cloud/vertexai';
import { getPropStrict } from '../../internals/helpers/object.js';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function processContentResponse(response) {
  return response.candidates?.flatMap((candidate) => candidate.content.parts.filter((part) => part.text).map((part) => part.text)).join() || "Empty";
}
__name(processContentResponse, "processContentResponse");
function getTokenCount(response) {
  return response.usageMetadata?.totalTokenCount ?? Infinity;
}
__name(getTokenCount, "getTokenCount");
function registerVertexAI() {
  Serializer.register(VertexAI, {
    toPlain: /* @__PURE__ */ __name((value) => ({
      project: getPropStrict(value, "project"),
      location: getPropStrict(value, "location")
    }), "toPlain"),
    fromPlain: /* @__PURE__ */ __name((value) => {
      return new VertexAI({
        project: value.project,
        location: value.location
      });
    }, "fromPlain")
  });
}
__name(registerVertexAI, "registerVertexAI");
function createModel(client, modelId, schema, params) {
  const modelParams = {
    model: modelId,
    ...params
  };
  if (schema) {
    const schemaJson = isString(schema) ? JSON.parse(schema) : schema;
    modelParams.generationConfig = {
      ...modelParams.generationConfig,
      responseSchema: schemaJson,
      responseMimeType: "application/json"
    };
  }
  return client.getGenerativeModel(modelParams);
}
__name(createModel, "createModel");

export { createModel, getTokenCount, processContentResponse, registerVertexAI };
//# sourceMappingURL=utils.js.map
//# sourceMappingURL=utils.js.map