import { ExecutionOptions, LLMCache, LLMMeta, EmbeddingOptions, EmbeddingOutput, BaseLLMTokenizeOutput, GenerateOptions, StreamGenerateOptions, AsyncStream, BaseLLMEvents } from '../../llms/base.js';
import { GetRunContext } from '../../context.js';
import { E as Emitter } from '../../emitter-DRfJC1TP.js';
import { VertexAI, BaseModelParams } from '@google-cloud/vertexai';
import { ChatLLMOutput, ChatLLMGenerateEvents, ChatLLM } from '../../llms/chat.js';
import { BaseMessage } from '../../llms/primitives/message.js';
import '../../errors.js';
import '../../internals/types.js';
import '../../internals/helpers/guards.js';
import '../../internals/serializable.js';
import '../../cache/base.js';
import 'promise-based-task';
import '../../internals/helpers/promise.js';

declare class VertexAIChatLLMOutput extends ChatLLMOutput {
    readonly chunks: BaseMessage[];
    constructor(chunk: BaseMessage);
    get messages(): BaseMessage[];
    merge(other: VertexAIChatLLMOutput): void;
    getTextContent(): string;
    toString(): string;
    createSnapshot(): {
        chunks: BaseMessage[];
    };
    loadSnapshot(snapshot: typeof this.createSnapshot): void;
}
interface VertexAIChatLLMInput {
    modelId: string;
    project: string;
    location: string;
    client?: VertexAI;
    executionOptions?: ExecutionOptions;
    cache?: LLMCache<VertexAIChatLLMOutput>;
    parameters?: BaseModelParams;
}
type VertexAIChatLLMEvents = ChatLLMGenerateEvents<VertexAIChatLLMOutput>;
declare class VertexAIChatLLM extends ChatLLM<VertexAIChatLLMOutput> {
    protected readonly input: VertexAIChatLLMInput;
    readonly emitter: Emitter<VertexAIChatLLMEvents>;
    protected client: VertexAI;
    protected parameters?: BaseModelParams;
    constructor(input: VertexAIChatLLMInput);
    meta(): Promise<LLMMeta>;
    embed(input: BaseMessage[][], options?: EmbeddingOptions): Promise<EmbeddingOutput>;
    tokenize(input: BaseMessage[]): Promise<BaseLLMTokenizeOutput>;
    protected _generate(input: BaseMessage[], options: GenerateOptions, run: GetRunContext<this>): Promise<VertexAIChatLLMOutput>;
    protected _stream(input: BaseMessage[], options: Partial<StreamGenerateOptions>, run: GetRunContext<this>): AsyncStream<VertexAIChatLLMOutput, void>;
    createSnapshot(): {
        input: VertexAIChatLLMInput;
        client: VertexAI;
        parameters: BaseModelParams | undefined;
        modelId: string;
        executionOptions: ExecutionOptions;
        emitter: Emitter<BaseLLMEvents<unknown, VertexAIChatLLMOutput>>;
        cache: LLMCache<VertexAIChatLLMOutput>;
    };
}

export { VertexAIChatLLM, type VertexAIChatLLMEvents, type VertexAIChatLLMInput, VertexAIChatLLMOutput };
