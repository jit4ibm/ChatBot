import { PromptTemplate } from '../../template.js';
import { ValueError } from '../../errors.js';
import { pickBy, isDefined, mapToObj } from 'remeda';
import { z } from 'zod';
import { toBoundedFunction } from '../../serializer/utils.js';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function messagesToPromptFactory(rolesOverride = {}) {
  const roles = pickBy({
    system: "system",
    user: "user",
    assistant: "assistant",
    ...rolesOverride
  }, isDefined);
  return (template) => {
    return toBoundedFunction((messages) => {
      return template.render({
        messages: messages.map((message) => Object.fromEntries(Object.entries(roles).map(([key, role]) => message.role === role ? [
          key,
          [
            message.text
          ]
        ] : [
          key,
          []
        ])))
      });
    }, [
      {
        name: "template",
        value: template
      },
      {
        name: "roles",
        value: roles
      }
    ]);
  };
}
__name(messagesToPromptFactory, "messagesToPromptFactory");
function templateSchemaFactory(roles) {
  return z.object({
    messages: z.array(z.object(mapToObj(roles, (role) => [
      role,
      z.array(z.string())
    ])))
  });
}
__name(templateSchemaFactory, "templateSchemaFactory");
const llama31 = {
  template: new PromptTemplate({
    schema: templateSchemaFactory([
      "system",
      "user",
      "assistant",
      "ipython"
    ]),
    template: `{{#messages}}{{#system}}<|begin_of_text|><|start_header_id|>system<|end_header_id|>

{{system}}<|eot_id|>{{/system}}{{#user}}<|start_header_id|>user<|end_header_id|>

{{user}}<|eot_id|>{{/user}}{{#assistant}}<|start_header_id|>assistant<|end_header_id|>

{{assistant}}<|eot_id|>{{/assistant}}{{#ipython}}<|start_header_id|>ipython<|end_header_id|>

{{ipython}}<|eot_id|>{{/ipython}}{{/messages}}<|start_header_id|>assistant<|end_header_id|>

`
  }),
  messagesToPrompt: messagesToPromptFactory({
    ipython: "ipython"
  }),
  parameters: {
    stop_sequence: [
      "<|eot_id|>"
    ]
  }
};
const llama33 = llama31;
const llama3 = {
  template: new PromptTemplate({
    schema: templateSchemaFactory([
      "system",
      "user",
      "assistant"
    ]),
    template: `{{#messages}}{{#system}}<|begin_of_text|><|start_header_id|>system<|end_header_id|>

{{system}}<|eot_id|>{{/system}}{{#user}}<|start_header_id|>user<|end_header_id|>

{{user}}<|eot_id|>{{/user}}{{#assistant}}<|start_header_id|>assistant<|end_header_id|>

{{assistant}}<|eot_id|>{{/assistant}}{{/messages}}<|start_header_id|>assistant<|end_header_id|>
`
  }),
  messagesToPrompt: messagesToPromptFactory(),
  parameters: {
    stop_sequence: [
      "<|eot_id|>"
    ]
  }
};
const granite31Instruct = {
  template: new PromptTemplate({
    schema: templateSchemaFactory([
      "system",
      "user",
      "assistant",
      "tools",
      "tool_call",
      "tool_response"
    ]),
    template: `{{#messages}}{{#system}}<|start_of_role|>system<|end_of_role|>
{{system}}<|end_of_text|>
{{ end }}{{/system}}{{#tools}}<|start_of_role|>tools<|end_of_role|>
{{tools}}<|end_of_text|>
{{ end }}{{/tools}}{{#user}}<|start_of_role|>user<|end_of_role|>
{{user}}<|end_of_text|>
{{ end }}{{/user}}{{#assistant}}<|start_of_role|>assistant<|end_of_role|>
{{assistant}}<|end_of_text|>
{{ end }}{{/assistant}}{{#tool_call}}<|start_of_role|>assistant<|end_of_role|><|tool_call|>
{{tool_call}}<|end_of_text|>
{{ end }}{{/tool_call}}{{#tool_response}}<|start_of_role|>tool_response<|end_of_role|>
{{tool_response}}<|end_of_text|>
{{ end }}{{/tool_response}}{{/messages}}<|start_of_role|>assistant<|end_of_role|>
`
  }),
  messagesToPrompt: messagesToPromptFactory({
    tools: "tools",
    tool_response: "tool_response",
    tool_call: "tool_call"
  }),
  parameters: {
    stop_sequence: [
      "<|end_of_text|>"
    ]
  }
};
class LLMChatTemplates {
  static {
    __name(this, "LLMChatTemplates");
  }
  static registry = {
    "llama3.3": llama33,
    "llama3.1": llama31,
    "llama3": llama3,
    "granite3.1-Instruct": granite31Instruct
  };
  static register(model, template, override = false) {
    if (model in this.registry && !override) {
      throw new ValueError(`Template for model '${model}' already exists!`);
    }
    this.registry[model] = template;
  }
  static has(model) {
    return Boolean(model && model in this.registry);
  }
  // eslint-disable-next-line @typescript-eslint/unified-signatures
  static get(model) {
    if (!this.has(model)) {
      throw new ValueError(`Template for model '${model}' not found!`, [], {
        context: {
          validModels: Object.keys(this.registry)
        }
      });
    }
    return this.registry[model];
  }
}

export { LLMChatTemplates, messagesToPromptFactory, templateSchemaFactory };
//# sourceMappingURL=llmChatTemplates.js.map
//# sourceMappingURL=llmChatTemplates.js.map