import { Serializer } from '../../serializer/serializer.js';
import { Ollama } from 'ollama';
import { getPropStrict } from '../../internals/helpers/object.js';
import { compareVersion, Comparator } from '../../internals/helpers/string.js';
import { isString } from 'remeda';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function registerClient() {
  Serializer.register(Ollama, {
    toPlain: /* @__PURE__ */ __name((value) => ({
      config: getPropStrict(value, "config"),
      fetch: getPropStrict(value, "fetch")
    }), "toPlain"),
    fromPlain: /* @__PURE__ */ __name((value) => new Ollama({
      fetch: value.fetch ?? value.config.fetch,
      host: value.config.host,
      proxy: value.config.proxy
    }), "fromPlain")
  });
}
__name(registerClient, "registerClient");
async function retrieveVersion(baseUrl, client = fetch) {
  const url = new URL("/api/version", baseUrl);
  const response = await client(url);
  if (!response.ok) {
    throw new Error(`Could not retrieve Ollama API version.`);
  }
  const data = await response.json();
  return data.version;
}
__name(retrieveVersion, "retrieveVersion");
function retrieveFormat(version, guided) {
  if (!guided?.json) {
    return void 0;
  }
  if (compareVersion(String(version), Comparator.GTE, "0.5.0")) {
    return isString(guided.json) ? JSON.parse(guided.json) : guided.json;
  } else {
    return "json";
  }
}
__name(retrieveFormat, "retrieveFormat");
function extractModelMeta(response) {
  const tokenLimit = Object.entries(response.model_info).find(([k]) => k.includes("context_length") || k.includes("max_sequence_length"))?.at(1);
  return {
    tokenLimit: tokenLimit || Infinity
  };
}
__name(extractModelMeta, "extractModelMeta");

export { extractModelMeta, registerClient, retrieveFormat, retrieveVersion };
//# sourceMappingURL=shared.js.map
//# sourceMappingURL=shared.js.map