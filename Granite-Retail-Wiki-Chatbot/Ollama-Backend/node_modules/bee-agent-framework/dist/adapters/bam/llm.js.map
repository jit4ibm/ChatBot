{"version":3,"sources":["../../../src/adapters/bam/llm.ts"],"names":["BAMLLMOutput","BaseLLMOutput","meta","results","moderations","constructor","content","R","isArray","filter","isDefined","register","getTextContent","finalResult","generated_text","finalModeration","_combineModerations","length","LLMOutputError","customMerge","value","oldValue","input_token_count","safeSum","generated_token_count","input_text","generated_tokens","seed","stop_reason","stop_sequence","input_tokens","merge","other","Cache","getInstance","clear","push","Object","assign","omitUndefined","createSnapshot","shallowCopy","loadSnapshot","snapshot","toString","entries","newModerations","entry","key","records","isEmpty","BAMLLM","LLM","emitter","Emitter","root","child","namespace","creator","client","parameters","modelId","cache","executionOptions","Client","result","model","retrieve","id","tokenLimit","token_limits","find","limit","beam_width","undefined","token_limit","Infinity","includes","embed","input","options","maxEmbeddingInputs","Promise","all","chunk","map","texts","response","text","embedding","create","model_id","truncate_input_tokens","signal","Error","embeddings","flat","_transformError","error","FrameworkError","HttpError","LLMError","isRetryable","status_code","tokenize","tokenization","return_options","tokens","tokensCount","token_count","e","_generate","run","generation","_prepareParameters","_rawResponseToOutput","_stream","create_stream","transformAsyncIterable","Symbol","asyncIterator","bind","raw","chunks","pickBy","created_at","input_parameters","overrides","guided","guidedOverride","choice","grammar","json","json_schema","isString","JSON","parse","regex","NotImplementedError","keys","join"],"mappings":"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","file":"llm.js","sourcesContent":["/**\n * Copyright 2024 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { LLM, LLMEvents, LLMInput } from \"@/llms/llm.js\";\nimport {\n  AsyncStream,\n  BaseLLMOutput,\n  BaseLLMTokenizeOutput,\n  EmbeddingOptions,\n  EmbeddingOutput,\n  ExecutionOptions,\n  GenerateOptions,\n  GuidedOptions,\n  LLMCache,\n  LLMError,\n  LLMMeta,\n  LLMOutputError,\n} from \"@/llms/base.js\";\nimport {\n  Client,\n  TextGenerationCreateInput,\n  TextGenerationCreateStreamInput,\n  TextGenerationCreateStreamOutput,\n  TextGenerationCreateOutput,\n  HttpError,\n} from \"@ibm-generative-ai/node-sdk\";\nimport * as R from \"remeda\";\nimport { ExcludeNonStringIndex } from \"@/internals/types.js\";\nimport { FrameworkError, NotImplementedError } from \"@/errors.js\";\nimport { Cache } from \"@/cache/decoratorCache.js\";\nimport { transformAsyncIterable } from \"@/internals/helpers/stream.js\";\nimport { shallowCopy } from \"@/serializer/utils.js\";\nimport { safeSum } from \"@/internals/helpers/number.js\";\nimport { customMerge, omitUndefined } from \"@/internals/helpers/object.js\";\nimport { chunk, isEmpty, isString } from \"remeda\";\nimport { Emitter } from \"@/emitter/emitter.js\";\nimport { GetRunContext } from \"@/context.js\";\n\nexport type BAMLLMOutputMeta = Omit<ExcludeNonStringIndex<TextGenerationCreateOutput>, \"results\">;\n\nexport type BAMLLMOutputResult = ExcludeNonStringIndex<\n  TextGenerationCreateOutput[\"results\"][number]\n>;\n\nexport type BAMLLMOutputModeration = ExcludeNonStringIndex<\n  TextGenerationCreateStreamOutput[\"moderations\"]\n>;\n\nexport interface BAMLLMOutputConstructor {\n  meta: BAMLLMOutputMeta;\n  results: BAMLLMOutputResult[];\n  moderations?: BAMLLMOutputModeration | BAMLLMOutputModeration[];\n}\n\nexport class BAMLLMOutput extends BaseLLMOutput {\n  public readonly meta: BAMLLMOutputMeta;\n  public readonly results: BAMLLMOutputResult[];\n  public readonly moderations: BAMLLMOutputModeration[];\n\n  constructor(content: BAMLLMOutputConstructor) {\n    super();\n    this.meta = content.meta;\n    this.results = content.results;\n    this.moderations = R.isArray(content.moderations)\n      ? content.moderations\n      : [content.moderations].filter(R.isDefined);\n  }\n\n  static {\n    this.register();\n  }\n\n  getTextContent(): string {\n    return this.finalResult.generated_text;\n  }\n\n  get finalModeration(): Readonly<BAMLLMOutputModeration> {\n    return BAMLLMOutput._combineModerations(...this.moderations, this.finalResult.moderations);\n  }\n\n  @Cache()\n  get finalResult(): Readonly<BAMLLMOutputResult> {\n    if (this.results.length === 0) {\n      throw new LLMOutputError(\"No chunks to get final result from!\");\n    }\n\n    return customMerge(this.results, {\n      generated_text: (value = \"\", oldValue = \"\") => oldValue + value,\n      input_token_count: safeSum,\n      generated_token_count: safeSum,\n      input_text: (value, oldValue) => value ?? oldValue,\n      generated_tokens: (value, oldValue) => [...(value || []), ...(oldValue || [])],\n      seed: (value, oldValue) => value ?? oldValue,\n      stop_reason: (value, oldValue) => value ?? oldValue,\n      stop_sequence: (value, oldValue) => value ?? oldValue,\n      input_tokens: (value, oldValue) => value ?? oldValue,\n      moderations: (value, oldValue) =>\n        value && oldValue ? BAMLLMOutput._combineModerations(oldValue, value) : (value ?? oldValue),\n    });\n  }\n\n  merge(other: BAMLLMOutput): void {\n    Cache.getInstance(this, \"finalResult\").clear();\n\n    this.results.push(...other.results);\n    this.moderations.push(...other.moderations);\n    Object.assign(this.meta, omitUndefined(other.meta));\n  }\n\n  createSnapshot() {\n    return {\n      results: shallowCopy(this.results),\n      moderations: shallowCopy(this.moderations),\n      meta: shallowCopy(this.meta),\n    };\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>) {\n    Object.assign(this, snapshot);\n  }\n\n  toString(): string {\n    return this.getTextContent();\n  }\n\n  protected static _combineModerations(...entries: BAMLLMOutputModeration[]) {\n    const newModerations: NonNullable<BAMLLMOutputModeration> = {};\n    for (const entry of entries) {\n      for (const [key, records] of R.entries(entry ?? {})) {\n        if (R.isEmpty(records)) {\n          continue;\n        }\n        if (!newModerations[key]) {\n          newModerations[key] = [];\n        }\n        newModerations[key]!.push(...records);\n      }\n    }\n    return newModerations;\n  }\n}\n\nexport type BAMLLMParameters = NonNullable<\n  TextGenerationCreateInput[\"parameters\"] & TextGenerationCreateStreamInput[\"parameters\"]\n>;\n\nexport interface BAMLLMGenerateOptions extends GenerateOptions {\n  moderations?: TextGenerationCreateInput[\"moderations\"];\n}\n\nexport interface BAMLLMInput {\n  client?: Client;\n  modelId: string;\n  parameters?: BAMLLMParameters;\n  executionOptions?: ExecutionOptions;\n  cache?: LLMCache<BAMLLMOutput>;\n}\n\nexport type BAMLLMEvents = LLMEvents<BAMLLMOutput>;\n\nexport class BAMLLM extends LLM<BAMLLMOutput, BAMLLMGenerateOptions> {\n  public readonly emitter = Emitter.root.child<BAMLLMEvents>({\n    namespace: [\"bam\", \"llm\"],\n    creator: this,\n  });\n\n  public readonly client: Client;\n  public readonly parameters: Partial<BAMLLMParameters>;\n\n  constructor({ client, parameters, modelId, cache, executionOptions = {} }: BAMLLMInput) {\n    super(modelId, executionOptions, cache);\n    this.client = client ?? new Client();\n    this.parameters = parameters ?? {};\n  }\n\n  static {\n    this.register();\n  }\n\n  async meta(): Promise<LLMMeta> {\n    try {\n      const { result } = await this.client.model.retrieve({\n        id: this.modelId,\n      });\n\n      const tokenLimit = result.token_limits?.find?.((limit) => {\n        if (this.parameters?.beam_width !== undefined) {\n          return limit.token_limit !== undefined && limit.beam_width === this.parameters.beam_width;\n        }\n        return limit.token_limit !== undefined;\n      });\n      return {\n        tokenLimit: tokenLimit?.token_limit ?? Infinity,\n      };\n    } catch {\n      // TODO: remove once retrieval gets fixed on the API\n      if (this.modelId === \"meta-llama/llama-3-1-70b-instruct\") {\n        return {\n          tokenLimit: 131_072,\n        };\n      } else if (this.modelId.includes(\"llama-3-70b-instruct\")) {\n        return {\n          tokenLimit: 8196,\n        };\n      }\n\n      return {\n        tokenLimit: Infinity,\n      };\n    }\n  }\n\n  async embed(input: LLMInput[], options?: EmbeddingOptions): Promise<EmbeddingOutput> {\n    const maxEmbeddingInputs = 20;\n    const results = await Promise.all(\n      chunk(input, maxEmbeddingInputs).map(async (texts) => {\n        const response = await this.client.text.embedding.create(\n          {\n            model_id: this.modelId,\n            input: texts,\n            parameters: {\n              truncate_input_tokens: true,\n            },\n          },\n          { signal: options?.signal },\n        );\n        if (response.results?.length !== texts.length) {\n          throw new Error(\"Missing embedding\");\n        }\n        return response.results.map((result) => result.embedding);\n      }),\n    );\n    return { embeddings: results.flat() };\n  }\n\n  createSnapshot() {\n    return {\n      ...super.createSnapshot(),\n      client: null,\n      modelId: this.modelId,\n      parameters: shallowCopy(this.parameters),\n      executionOptions: shallowCopy(this.executionOptions),\n    };\n  }\n\n  loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>): void {\n    super.loadSnapshot(snapshot);\n    Object.assign(this, snapshot, {\n      client: snapshot?.client ?? new Client(), // TODO: serialize?\n    });\n  }\n\n  protected _transformError(error: Error): Error {\n    if (error instanceof FrameworkError) {\n      throw error;\n    }\n    if (error instanceof HttpError) {\n      throw new LLMError(\"LLM has occurred an error!\", [error], {\n        isRetryable: [408, 425, 429, 500, 503].includes(error.status_code),\n      });\n    }\n    return new LLMError(\"LLM has occurred an error!\", [error]);\n  }\n\n  async tokenize(input: LLMInput): Promise<BaseLLMTokenizeOutput> {\n    try {\n      const {\n        results: [result],\n      } = await this.client.text.tokenization.create({\n        input,\n        model_id: this.modelId,\n        parameters: {\n          return_options: {\n            tokens: true,\n          },\n        },\n      });\n\n      return {\n        tokensCount: result.token_count,\n        tokens: result.tokens,\n      };\n    } catch (e) {\n      throw this._transformError(e);\n    }\n  }\n\n  protected async _generate(\n    input: LLMInput,\n    options: BAMLLMGenerateOptions,\n    run: GetRunContext<typeof this>,\n  ): Promise<BAMLLMOutput> {\n    try {\n      const response = await this.client.text.generation.create(\n        {\n          input,\n          moderations: options?.moderations,\n          model_id: this.modelId,\n          parameters: this._prepareParameters(options),\n        },\n        {\n          signal: run.signal,\n        },\n      );\n      return this._rawResponseToOutput(response);\n    } catch (e) {\n      throw this._transformError(e);\n    }\n  }\n\n  protected async *_stream(\n    input: string,\n    options: BAMLLMGenerateOptions,\n    run: GetRunContext<typeof this>,\n  ): AsyncStream<BAMLLMOutput, void> {\n    try {\n      const response = await this.client.text.generation.create_stream(\n        {\n          input,\n          moderations: options?.moderations,\n          model_id: this.modelId,\n          parameters: this._prepareParameters(options),\n        },\n        {\n          signal: run.signal,\n        },\n      );\n      yield* transformAsyncIterable(\n        response[Symbol.asyncIterator](),\n        this._rawResponseToOutput.bind(this),\n      );\n    } catch (e) {\n      throw this._transformError(e);\n    }\n  }\n\n  protected _rawResponseToOutput(\n    raw: TextGenerationCreateOutput | TextGenerationCreateStreamOutput,\n  ) {\n    const chunks = (raw.results ?? []) as BAMLLMOutputResult[];\n\n    return new BAMLLMOutput({\n      results: chunks,\n      moderations: (raw as TextGenerationCreateStreamOutput)?.moderations,\n      meta: R.pickBy(\n        {\n          id: raw.id!,\n          model_id: raw.model_id,\n          created_at: raw.created_at!,\n          input_parameters: raw.input_parameters,\n        },\n        R.isDefined,\n      ),\n    });\n  }\n\n  protected _prepareParameters(overrides?: GenerateOptions): typeof this.parameters {\n    const guided: BAMLLMParameters[\"guided\"] = omitUndefined(\n      overrides?.guided ? {} : (this.parameters.guided ?? {}),\n    );\n    const guidedOverride: GuidedOptions = omitUndefined(overrides?.guided ?? {});\n\n    if (guidedOverride?.choice) {\n      guided.choice = guidedOverride.choice;\n    } else if (guidedOverride?.grammar) {\n      guided.grammar = guidedOverride.grammar;\n    } else if (guidedOverride?.json) {\n      guided.json_schema = isString(guidedOverride.json)\n        ? JSON.parse(guidedOverride.json)\n        : guidedOverride.json;\n    } else if (guidedOverride?.regex) {\n      guided.regex = guidedOverride.regex;\n    } else if (!isEmpty(guidedOverride ?? {})) {\n      throw new NotImplementedError(\n        `Following types ${Object.keys(overrides!.guided!).join(\",\")}\" for the constraint decoding are not supported!`,\n      );\n    }\n\n    return {\n      ...this.parameters,\n      guided: isEmpty(guided) ? undefined : guided,\n    };\n  }\n}\n"]}