'use strict';

var utils_cjs = require('../../serializer/utils.cjs');
var chat_cjs = require('../../llms/chat.cjs');
var message_cjs = require('../../llms/primitives/message.cjs');
var emitter_cjs = require('../../emitter/emitter.cjs');
var clientBedrockRuntime = require('@aws-sdk/client-bedrock-runtime');
var serializer_cjs = require('../../serializer/serializer.cjs');
var errors_cjs = require('../../errors.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
class ChatBedrockOutput extends chat_cjs.ChatLLMOutput {
  static {
    __name(this, "ChatBedrockOutput");
  }
  responses;
  constructor(response) {
    super();
    this.responses = [
      response
    ];
  }
  static {
    this.register();
  }
  get messages() {
    return this.responses.flatMap((response) => {
      if ("delta" in response && response.delta?.text) {
        return [
          message_cjs.BaseMessage.of({
            role: message_cjs.Role.ASSISTANT,
            text: response.delta.text
          })
        ];
      } else if ("output" in response && response.output?.message?.content) {
        return response.output.message.content.filter((choice) => choice?.text).map((choice) => message_cjs.BaseMessage.of({
          role: message_cjs.Role.ASSISTANT,
          text: choice.text
        }));
      }
      return [];
    });
  }
  getTextContent() {
    return this.messages.map((msg) => msg.text).join("");
  }
  merge(other) {
    this.responses.push(...other.responses);
  }
  toString() {
    return this.getTextContent();
  }
  createSnapshot() {
    return {
      responses: utils_cjs.shallowCopy(this.responses)
    };
  }
  loadSnapshot(snapshot) {
    Object.assign(this, snapshot);
  }
}
class BedrockChatLLM extends chat_cjs.ChatLLM {
  static {
    __name(this, "BedrockChatLLM");
  }
  emitter = emitter_cjs.Emitter.root.child({
    namespace: [
      "bedrock",
      "chat_llm"
    ],
    creator: this
  });
  client;
  parameters;
  constructor({ client, modelId = "amazon.titan-text-lite-v1", region = "us-east-1", credentials, parameters = {
    temperature: 0
  }, executionOptions = {}, cache } = {}) {
    super(modelId, executionOptions, cache);
    this.client = client ?? new clientBedrockRuntime.BedrockRuntimeClient({
      region,
      credentials
    });
    this.parameters = parameters ?? {};
  }
  static {
    this.register();
    serializer_cjs.Serializer.register(clientBedrockRuntime.BedrockRuntimeClient, {
      toPlain: /* @__PURE__ */ __name((value) => ({
        config: {
          region: value.config.region,
          credentials: value.config.credentials
        }
      }), "toPlain"),
      fromPlain: /* @__PURE__ */ __name((value) => new clientBedrockRuntime.BedrockRuntimeClient({
        region: value.config.region,
        credentials: value.config.credentials
      }), "fromPlain")
    });
  }
  async meta() {
    if (this.modelId.includes("titan-text-premier")) {
      return {
        tokenLimit: 3 * 1024
      };
    } else if (this.modelId.includes("titan-text-express") || this.modelId.includes("anthropic.claude-v2") || this.modelId.includes("anthropic.claude-instant-v1") || this.modelId.includes("anthropic.claude-3-sonnet") || this.modelId.includes("anthropic.claude-3-haiku") || this.modelId.includes("anthropic.claude-3-opus") || this.modelId.includes("meta.llama2") || this.modelId.includes("cohere.command-text") || this.modelId.includes("cohere.command-light")) {
      return {
        tokenLimit: 4 * 1024
      };
    } else if (this.modelId.includes("titan-text-lite") || this.modelId.includes("anthropic.claude-3-5-sonnet") || this.modelId.includes("anthropic.claude-3-5-haiku") || this.modelId.includes("meta.llama3-8b") || this.modelId.includes("meta.llama3-70b") || this.modelId.includes("ai21.j2")) {
      return {
        tokenLimit: 8 * 1024
      };
    } else if (this.modelId.includes("mistral.mistral-7b") || this.modelId.includes("mistral.mixtral-8x7b") || this.modelId.includes("mistral.mistral-small")) {
      return {
        tokenLimit: 32 * 1024
      };
    } else if (this.modelId.includes("meta.llama3-1") || this.modelId.includes("meta.llama3-2") || this.modelId.includes("mistral.mistral-large") || this.modelId.includes("cohere.command-r")) {
      return {
        tokenLimit: 128 * 1024
      };
    } else if (this.modelId.includes("ai21.jamba")) {
      return {
        tokenLimit: 256 * 1024
      };
    }
    return {
      tokenLimit: Infinity
    };
  }
  // eslint-disable-next-line unused-imports/no-unused-vars
  async embed(input, options) {
    throw new errors_cjs.NotImplementedError();
  }
  async tokenize(input) {
    const contentLength = input.reduce((acc, msg) => acc + msg.text.length, 0);
    return {
      tokensCount: Math.ceil(contentLength / 4)
    };
  }
  async _generate(input, _options, run) {
    const { conversation, systemMessage } = this.convertToConverseMessages(input);
    const command = new clientBedrockRuntime.ConverseCommand({
      modelId: this.modelId,
      messages: conversation,
      system: systemMessage,
      ...this.parameters
    });
    const response = await this.client.send(command, {
      abortSignal: run.signal
    });
    return new ChatBedrockOutput(response);
  }
  async *_stream(input, _options, run) {
    const { conversation, systemMessage } = this.convertToConverseMessages(input);
    const command = new clientBedrockRuntime.ConverseStreamCommand({
      modelId: this.modelId,
      messages: conversation,
      system: systemMessage,
      ...this.parameters
    });
    const response = await this.client.send(command, {
      abortSignal: run.signal
    });
    for await (const chunk of response?.stream || []) {
      if (chunk.contentBlockDelta) {
        yield new ChatBedrockOutput(chunk.contentBlockDelta);
      }
    }
  }
  createSnapshot() {
    return {
      ...super.createSnapshot(),
      client: this.client,
      modelId: this.modelId,
      parameters: utils_cjs.shallowCopy(this.parameters)
    };
  }
  convertToConverseMessages(messages) {
    const systemMessage = messages.filter((msg) => msg.role === message_cjs.Role.SYSTEM).map((msg) => ({
      text: msg.text
    }));
    const converseMessages = messages.filter((msg) => msg.role !== message_cjs.Role.SYSTEM).map((msg) => ({
      role: msg.role === message_cjs.Role.USER ? message_cjs.Role.USER : message_cjs.Role.ASSISTANT,
      content: [
        {
          text: msg.text
        }
      ]
    }));
    const conversation = converseMessages.reduce((messageList, currentMessage) => {
      const lastMessage = messageList[messageList.length - 1];
      if (lastMessage && lastMessage !== currentMessage && lastMessage.role === message_cjs.Role.USER) {
        lastMessage.content = lastMessage.content.concat(currentMessage.content);
      } else {
        messageList.push(currentMessage);
      }
      return messageList;
    }, []);
    return {
      conversation,
      systemMessage
    };
  }
}

exports.BedrockChatLLM = BedrockChatLLM;
exports.ChatBedrockOutput = ChatBedrockOutput;
//# sourceMappingURL=chat.cjs.map
//# sourceMappingURL=chat.cjs.map