/**
 * Copyright 2024 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var private_pb_exports = {};
__export(private_pb_exports, {
  Constraint: () => Constraint,
  FieldConstraints: () => FieldConstraints,
  field: () => field
});
module.exports = __toCommonJS(private_pb_exports);
var import_protobuf = require("@bufbuild/protobuf");
class FieldConstraints extends import_protobuf.Message {
  /**
   * @generated from field: repeated buf.validate.priv.Constraint cel = 1;
   */
  cel = [];
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "buf.validate.priv.FieldConstraints";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    { no: 1, name: "cel", kind: "message", T: Constraint, repeated: true }
  ]);
  static fromBinary(bytes, options) {
    return new FieldConstraints().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new FieldConstraints().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new FieldConstraints().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(FieldConstraints, a, b);
  }
}
class Constraint extends import_protobuf.Message {
  /**
   * @generated from field: string id = 1;
   */
  id = "";
  /**
   * @generated from field: string message = 2;
   */
  message = "";
  /**
   * @generated from field: string expression = 3;
   */
  expression = "";
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "buf.validate.priv.Constraint";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "message",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "expression",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]);
  static fromBinary(bytes, options) {
    return new Constraint().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new Constraint().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new Constraint().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(Constraint, a, b);
  }
}
const field = import_protobuf.proto3.makeExtension(
  "buf.validate.priv.field",
  import_protobuf.FieldOptions,
  () => ({ no: 1160, kind: "message", T: FieldConstraints, opt: true })
);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  Constraint,
  FieldConstraints,
  field
});
//# sourceMappingURL=private_pb.cjs.map