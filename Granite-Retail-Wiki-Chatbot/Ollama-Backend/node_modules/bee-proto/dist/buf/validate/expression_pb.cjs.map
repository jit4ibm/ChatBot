{"version":3,"sources":["../../../gen/typescript/buf/validate/expression_pb.ts"],"sourcesContent":["// Copyright 2023 Buf Technologies, Inc.\n//\n// Licensed under the Apache License, Version 2.0 (the \"License\");\n// you may not use this file except in compliance with the License.\n// You may obtain a copy of the License at\n//\n//      http://www.apache.org/licenses/LICENSE-2.0\n//\n// Unless required by applicable law or agreed to in writing, software\n// distributed under the License is distributed on an \"AS IS\" BASIS,\n// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n// See the License for the specific language governing permissions and\n// limitations under the License.\n\n// @generated by protoc-gen-es v1.10.0 with parameter \"target=ts\"\n// @generated from file buf/validate/expression.proto (package buf.validate, syntax proto3)\n/* eslint-disable */\n// @ts-nocheck\n\nimport type { BinaryReadOptions, FieldList, JsonReadOptions, JsonValue, PartialMessage, PlainMessage } from \"@bufbuild/protobuf\";\nimport { Message, proto3 } from \"@bufbuild/protobuf\";\n\n/**\n * `Constraint` represents a validation rule written in the Common Expression\n * Language (CEL) syntax. Each Constraint includes a unique identifier, an\n * optional error message, and the CEL expression to evaluate. For more\n * information on CEL, [see our documentation](https://github.com/bufbuild/protovalidate/blob/main/docs/cel.md).\n *\n * ```proto\n * message Foo {\n *   option (buf.validate.message).cel = {\n *     id: \"foo.bar\"\n *     message: \"bar must be greater than 0\"\n *     expression: \"this.bar > 0\"\n *   };\n *   int32 bar = 1;\n * }\n * ```\n *\n * @generated from message buf.validate.Constraint\n */\nexport class Constraint extends Message<Constraint> {\n  /**\n   * `id` is a string that serves as a machine-readable name for this Constraint.\n   * It should be unique within its scope, which could be either a message or a field.\n   *\n   * @generated from field: string id = 1;\n   */\n  id = \"\";\n\n  /**\n   * `message` is an optional field that provides a human-readable error message\n   * for this Constraint when the CEL expression evaluates to false. If a\n   * non-empty message is provided, any strings resulting from the CEL\n   * expression evaluation are ignored.\n   *\n   * @generated from field: string message = 2;\n   */\n  message = \"\";\n\n  /**\n   * `expression` is the actual CEL expression that will be evaluated for\n   * validation. This string must resolve to either a boolean or a string\n   * value. If the expression evaluates to false or a non-empty string, the\n   * validation is considered failed, and the message is rejected.\n   *\n   * @generated from field: string expression = 3;\n   */\n  expression = \"\";\n\n  constructor(data?: PartialMessage<Constraint>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"buf.validate.Constraint\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"expression\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Constraint {\n    return new Constraint().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Constraint {\n    return new Constraint().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Constraint {\n    return new Constraint().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Constraint | PlainMessage<Constraint> | undefined, b: Constraint | PlainMessage<Constraint> | undefined): boolean {\n    return proto3.util.equals(Constraint, a, b);\n  }\n}\n\n/**\n * `Violations` is a collection of `Violation` messages. This message type is returned by\n * protovalidate when a proto message fails to meet the requirements set by the `Constraint` validation rules.\n * Each individual violation is represented by a `Violation` message.\n *\n * @generated from message buf.validate.Violations\n */\nexport class Violations extends Message<Violations> {\n  /**\n   * `violations` is a repeated field that contains all the `Violation` messages corresponding to the violations detected.\n   *\n   * @generated from field: repeated buf.validate.Violation violations = 1;\n   */\n  violations: Violation[] = [];\n\n  constructor(data?: PartialMessage<Violations>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"buf.validate.Violations\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"violations\", kind: \"message\", T: Violation, repeated: true },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Violations {\n    return new Violations().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Violations {\n    return new Violations().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Violations {\n    return new Violations().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Violations | PlainMessage<Violations> | undefined, b: Violations | PlainMessage<Violations> | undefined): boolean {\n    return proto3.util.equals(Violations, a, b);\n  }\n}\n\n/**\n * `Violation` represents a single instance where a validation rule, expressed\n * as a `Constraint`, was not met. It provides information about the field that\n * caused the violation, the specific constraint that wasn't fulfilled, and a\n * human-readable error message.\n *\n * ```json\n * {\n *   \"fieldPath\": \"bar\",\n *   \"constraintId\": \"foo.bar\",\n *   \"message\": \"bar must be greater than 0\"\n * }\n * ```\n *\n * @generated from message buf.validate.Violation\n */\nexport class Violation extends Message<Violation> {\n  /**\n   * `field_path` is a machine-readable identifier that points to the specific field that failed the validation.\n   * This could be a nested field, in which case the path will include all the parent fields leading to the actual field that caused the violation.\n   *\n   * @generated from field: string field_path = 1;\n   */\n  fieldPath = \"\";\n\n  /**\n   * `constraint_id` is the unique identifier of the `Constraint` that was not fulfilled.\n   * This is the same `id` that was specified in the `Constraint` message, allowing easy tracing of which rule was violated.\n   *\n   * @generated from field: string constraint_id = 2;\n   */\n  constraintId = \"\";\n\n  /**\n   * `message` is a human-readable error message that describes the nature of the violation.\n   * This can be the default error message from the violated `Constraint`, or it can be a custom message that gives more context about the violation.\n   *\n   * @generated from field: string message = 3;\n   */\n  message = \"\";\n\n  /**\n   * `for_key` indicates whether the violation was caused by a map key, rather than a value.\n   *\n   * @generated from field: bool for_key = 4;\n   */\n  forKey = false;\n\n  constructor(data?: PartialMessage<Violation>) {\n    super();\n    proto3.util.initPartial(data, this);\n  }\n\n  static readonly runtime: typeof proto3 = proto3;\n  static readonly typeName = \"buf.validate.Violation\";\n  static readonly fields: FieldList = proto3.util.newFieldList(() => [\n    { no: 1, name: \"field_path\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 2, name: \"constraint_id\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 3, name: \"message\", kind: \"scalar\", T: 9 /* ScalarType.STRING */ },\n    { no: 4, name: \"for_key\", kind: \"scalar\", T: 8 /* ScalarType.BOOL */ },\n  ]);\n\n  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Violation {\n    return new Violation().fromBinary(bytes, options);\n  }\n\n  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Violation {\n    return new Violation().fromJson(jsonValue, options);\n  }\n\n  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Violation {\n    return new Violation().fromJsonString(jsonString, options);\n  }\n\n  static equals(a: Violation | PlainMessage<Violation> | undefined, b: Violation | PlainMessage<Violation> | undefined): boolean {\n    return proto3.util.equals(Violation, a, b);\n  }\n}\n\n"],"mappings":"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","names":[]}