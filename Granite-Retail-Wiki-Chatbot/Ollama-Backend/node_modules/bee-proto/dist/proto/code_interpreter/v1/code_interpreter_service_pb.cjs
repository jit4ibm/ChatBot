/**
 * Copyright 2024 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);
var code_interpreter_service_pb_exports = {};
__export(code_interpreter_service_pb_exports, {
  ExecuteCustomToolRequest: () => ExecuteCustomToolRequest,
  ExecuteCustomToolResponse: () => ExecuteCustomToolResponse,
  ExecuteCustomToolResponseError: () => ExecuteCustomToolResponseError,
  ExecuteCustomToolResponseSuccess: () => ExecuteCustomToolResponseSuccess,
  ExecuteRequest: () => ExecuteRequest,
  ExecuteResponse: () => ExecuteResponse,
  ParseCustomToolRequest: () => ParseCustomToolRequest,
  ParseCustomToolResponse: () => ParseCustomToolResponse,
  ParseCustomToolResponseError: () => ParseCustomToolResponseError,
  ParseCustomToolResponseSuccess: () => ParseCustomToolResponseSuccess
});
module.exports = __toCommonJS(code_interpreter_service_pb_exports);
var import_protobuf = require("@bufbuild/protobuf");
class ExecuteRequest extends import_protobuf.Message {
  /**
   * @generated from field: string executor_id = 1;
   */
  executorId = "";
  /**
   * @generated from field: string source_code = 2;
   */
  sourceCode = "";
  /**
   * @generated from field: map<string, string> files = 3;
   */
  files = {};
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "code_interpreter.v1.ExecuteRequest";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "executor_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "source_code",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    { no: 3, name: "files", kind: "map", K: 9, V: {
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    } }
  ]);
  static fromBinary(bytes, options) {
    return new ExecuteRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ExecuteRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ExecuteRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(ExecuteRequest, a, b);
  }
}
class ExecuteResponse extends import_protobuf.Message {
  /**
   * @generated from field: string stdout = 1;
   */
  stdout = "";
  /**
   * @generated from field: string stderr = 2;
   */
  stderr = "";
  /**
   * @generated from field: int32 exit_code = 3;
   */
  exitCode = 0;
  /**
   * @generated from field: map<string, string> files = 4;
   */
  files = {};
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "code_interpreter.v1.ExecuteResponse";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "stdout",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "stderr",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "exit_code",
      kind: "scalar",
      T: 5
      /* ScalarType.INT32 */
    },
    { no: 4, name: "files", kind: "map", K: 9, V: {
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    } }
  ]);
  static fromBinary(bytes, options) {
    return new ExecuteResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ExecuteResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ExecuteResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(ExecuteResponse, a, b);
  }
}
class ParseCustomToolRequest extends import_protobuf.Message {
  /**
   * @generated from field: string tool_source_code = 1;
   */
  toolSourceCode = "";
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "code_interpreter.v1.ParseCustomToolRequest";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "tool_source_code",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]);
  static fromBinary(bytes, options) {
    return new ParseCustomToolRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ParseCustomToolRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ParseCustomToolRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(ParseCustomToolRequest, a, b);
  }
}
class ParseCustomToolResponseSuccess extends import_protobuf.Message {
  /**
   * @generated from field: string tool_name = 1;
   */
  toolName = "";
  /**
   * @generated from field: string tool_description = 2;
   */
  toolDescription = "";
  /**
   * @generated from field: string tool_input_schema_json = 3;
   */
  toolInputSchemaJson = "";
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "code_interpreter.v1.ParseCustomToolResponseSuccess";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "tool_name",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "tool_description",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "tool_input_schema_json",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]);
  static fromBinary(bytes, options) {
    return new ParseCustomToolResponseSuccess().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ParseCustomToolResponseSuccess().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ParseCustomToolResponseSuccess().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(ParseCustomToolResponseSuccess, a, b);
  }
}
class ParseCustomToolResponseError extends import_protobuf.Message {
  /**
   * @generated from field: repeated string error_messages = 1;
   */
  errorMessages = [];
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "code_interpreter.v1.ParseCustomToolResponseError";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    { no: 1, name: "error_messages", kind: "scalar", T: 9, repeated: true }
  ]);
  static fromBinary(bytes, options) {
    return new ParseCustomToolResponseError().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ParseCustomToolResponseError().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ParseCustomToolResponseError().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(ParseCustomToolResponseError, a, b);
  }
}
class ParseCustomToolResponse extends import_protobuf.Message {
  /**
   * @generated from oneof code_interpreter.v1.ParseCustomToolResponse.response
   */
  response = { case: void 0 };
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "code_interpreter.v1.ParseCustomToolResponse";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "message", T: ParseCustomToolResponseSuccess, oneof: "response" },
    { no: 2, name: "error", kind: "message", T: ParseCustomToolResponseError, oneof: "response" }
  ]);
  static fromBinary(bytes, options) {
    return new ParseCustomToolResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ParseCustomToolResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ParseCustomToolResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(ParseCustomToolResponse, a, b);
  }
}
class ExecuteCustomToolRequest extends import_protobuf.Message {
  /**
   * @generated from field: string executor_id = 1;
   */
  executorId = "";
  /**
   * @generated from field: string tool_source_code = 2;
   */
  toolSourceCode = "";
  /**
   * @generated from field: string tool_input_json = 3;
   */
  toolInputJson = "";
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "code_interpreter.v1.ExecuteCustomToolRequest";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "executor_id",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 2,
      name: "tool_source_code",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    },
    {
      no: 3,
      name: "tool_input_json",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]);
  static fromBinary(bytes, options) {
    return new ExecuteCustomToolRequest().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ExecuteCustomToolRequest().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ExecuteCustomToolRequest().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(ExecuteCustomToolRequest, a, b);
  }
}
class ExecuteCustomToolResponseSuccess extends import_protobuf.Message {
  /**
   * @generated from field: string tool_output_json = 1;
   */
  toolOutputJson = "";
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "code_interpreter.v1.ExecuteCustomToolResponseSuccess";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "tool_output_json",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]);
  static fromBinary(bytes, options) {
    return new ExecuteCustomToolResponseSuccess().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ExecuteCustomToolResponseSuccess().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ExecuteCustomToolResponseSuccess().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(ExecuteCustomToolResponseSuccess, a, b);
  }
}
class ExecuteCustomToolResponseError extends import_protobuf.Message {
  /**
   * @generated from field: string stderr = 1;
   */
  stderr = "";
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "code_interpreter.v1.ExecuteCustomToolResponseError";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "stderr",
      kind: "scalar",
      T: 9
      /* ScalarType.STRING */
    }
  ]);
  static fromBinary(bytes, options) {
    return new ExecuteCustomToolResponseError().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ExecuteCustomToolResponseError().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ExecuteCustomToolResponseError().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(ExecuteCustomToolResponseError, a, b);
  }
}
class ExecuteCustomToolResponse extends import_protobuf.Message {
  /**
   * @generated from oneof code_interpreter.v1.ExecuteCustomToolResponse.response
   */
  response = { case: void 0 };
  constructor(data) {
    super();
    import_protobuf.proto3.util.initPartial(data, this);
  }
  static runtime = import_protobuf.proto3;
  static typeName = "code_interpreter.v1.ExecuteCustomToolResponse";
  static fields = import_protobuf.proto3.util.newFieldList(() => [
    { no: 1, name: "success", kind: "message", T: ExecuteCustomToolResponseSuccess, oneof: "response" },
    { no: 2, name: "error", kind: "message", T: ExecuteCustomToolResponseError, oneof: "response" }
  ]);
  static fromBinary(bytes, options) {
    return new ExecuteCustomToolResponse().fromBinary(bytes, options);
  }
  static fromJson(jsonValue, options) {
    return new ExecuteCustomToolResponse().fromJson(jsonValue, options);
  }
  static fromJsonString(jsonString, options) {
    return new ExecuteCustomToolResponse().fromJsonString(jsonString, options);
  }
  static equals(a, b) {
    return import_protobuf.proto3.util.equals(ExecuteCustomToolResponse, a, b);
  }
}
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ExecuteCustomToolRequest,
  ExecuteCustomToolResponse,
  ExecuteCustomToolResponseError,
  ExecuteCustomToolResponseSuccess,
  ExecuteRequest,
  ExecuteResponse,
  ParseCustomToolRequest,
  ParseCustomToolResponse,
  ParseCustomToolResponseError,
  ParseCustomToolResponseSuccess
});
//# sourceMappingURL=code_interpreter_service_pb.cjs.map