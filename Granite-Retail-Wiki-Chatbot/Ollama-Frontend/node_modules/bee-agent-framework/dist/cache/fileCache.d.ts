import { BaseCache } from './base.js';
import '../internals/serializable.js';
import '../internals/types.js';
import '../internals/helpers/guards.js';

/**
 * Copyright 2024 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

interface Input {
    fullPath: string;
}
declare class FileCache<T> extends BaseCache<T> {
    protected readonly input: Input;
    constructor(input: Input);
    get source(): string;
    static fromProvider<A>(provider: BaseCache<A>, input: Input): Promise<FileCache<A>>;
    protected getProvider(): Promise<BaseCache<T>>;
    reload(): Promise<void>;
    protected save(): Promise<void>;
    size(): Promise<number>;
    set(key: string, value: T): Promise<void>;
    get(key: string): Promise<T | undefined>;
    has(key: string): Promise<boolean>;
    delete(key: string): Promise<boolean>;
    clear(): Promise<void>;
    createSnapshot(): Promise<{
        input: {
            fullPath: string;
        };
        provider: BaseCache<T>;
    }>;
    loadSnapshot(snapshot: Awaited<ReturnType<typeof this.createSnapshot>>): void;
}

export { FileCache };
