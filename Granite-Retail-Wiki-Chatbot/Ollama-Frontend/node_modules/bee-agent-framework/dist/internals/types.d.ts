import { Primitive } from './helpers/guards.js';

/**
 * Copyright 2024 IBM Corp.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

type ExcludeArrayLike<T> = object & Exclude<T, any[]>;
type ObjectLike<K extends keyof any = string, V = any> = Record<K, V>;
type PlainObject<K extends string = string, V = Primitive> = Exclude<ExcludeArrayLike<Record<K & string, any extends V ? never : V>>, any[]>;
type ExcludeNonStringIndex<T> = {
    [K in keyof T as string extends K ? never : number extends K ? never : K]: T[K];
};
type AnyFn = (...args: any[]) => any;
type Enum<T> = Readonly<{
    [K in keyof T]: K;
}>;
type EnumFromUnion<T extends string> = Readonly<{
    [K in T as Uppercase<K>]: K;
}>;
type EnumValue<T> = T extends Enum<infer P> ? P[keyof P] : never;
type EnumLowerCaseValue<T> = Readonly<{
    [K in keyof T]: K extends string ? Lowercase<K> : never;
}>[keyof T];
type EmptyObject = Record<string, never>;
type OmitType<T, O = never> = {
    [K in keyof T as T[K] extends O ? never : K]: T[K];
};
type Class<T = any> = new (...args: any[]) => T;
type TupleUnion<U extends string, R extends any[] = []> = {
    [S in U]: Exclude<U, S> extends never ? [...R, S] : TupleUnion<Exclude<U, S>, [...R, S]>;
}[U];
type ArrayKeys<T> = TupleUnion<Extract<keyof T, string>>;
type Common<A, B> = {
    [P in keyof A & keyof B]: A[P] | B[P];
};
type ValueOf<T extends NonNullable<unknown>> = T[keyof T];
type Head<T> = T extends [infer A, ...any] ? A : never;
type Tail<T> = T extends [any, ...infer B] ? B : never;
type RequiredExcept<T, K extends keyof T> = Omit<Required<T>, K> & Pick<Partial<T>, K>;
type OptionalExcept<T, K extends keyof T> = Pick<Required<T>, K> & Omit<Partial<T>, K>;
type NonUndefined<T, K extends keyof T = keyof T> = Pick<Required<T>, K> & Omit<T, K>;
type RequiredAll<T> = {
    [P in keyof T]-?: NonNullable<T[P]>;
};
type RequiredNested<T> = {
    [P in keyof T]-?: Required<T[P]>;
};
type OmitEmpty<T> = OmitType<T, never | void>;
type NonEmptyArray<T> = [T, ...T[]];
type Unwrap<T> = T extends (infer X)[] ? X : T;
type Constructable<T> = new (...args: any[]) => T;
type AbstractConstructable = abstract new (...args: any[]) => any;
type AnyConstructable = Constructable<any>;
type Constructor<T extends new (...args: any) => any> = T extends new (...args: infer A) => infer R ? new (...args: A) => R : never;
interface ClassConstructor<T = any> {
    name: string;
    new (...args: any[]): T;
}
type AbstractClassConstructor<T = any> = abstract new (...args: any[]) => T;
interface NamedFunction<T = any> {
    name: string;
    (...args: any[]): T;
}
type PromiseOrPlain<T, Decider extends AnyFn> = ReturnType<Decider> extends Promise<unknown> ? Promise<T> : T;
type NoPromise<T> = T extends Promise<unknown> ? never : T;
type TypedFn<P extends any[], R> = (...args: P) => R;
declare function narrowTo<T>(value: unknown, fn: boolean | ((value: T) => boolean)): value is T;
type Without<T, U> = Partial<Record<Exclude<keyof T, keyof U>, never>>;
type XOR<T, U> = T | U extends object ? (Without<T, U> & U) | (Without<U, T> & T) : T | U;
type OneOf<T extends any[]> = T extends [infer Only] ? Only : T extends [infer A, infer B, ...infer Rest] ? OneOf<[XOR<A, B>, ...Rest]> : never;
type AnyVoid = Promise<unknown> | unknown;
type OmitPrivateKeys<T> = {
    [K in keyof T as K extends `_${string}` ? never : K]: T[K];
};

export { type AbstractClassConstructor, type AbstractConstructable, type AnyConstructable, type AnyFn, type AnyVoid, type ArrayKeys, type Class, type ClassConstructor, type Common, type Constructable, type Constructor, type EmptyObject, type Enum, type EnumFromUnion, type EnumLowerCaseValue, type EnumValue, type ExcludeNonStringIndex, type Head, type NamedFunction, type NoPromise, type NonEmptyArray, type NonUndefined, type ObjectLike, type OmitEmpty, type OmitPrivateKeys, type OmitType, type OneOf, type OptionalExcept, type PlainObject, type PromiseOrPlain, type RequiredAll, type RequiredExcept, type RequiredNested, type Tail, type TypedFn, type Unwrap, type ValueOf, type XOR, narrowTo };
