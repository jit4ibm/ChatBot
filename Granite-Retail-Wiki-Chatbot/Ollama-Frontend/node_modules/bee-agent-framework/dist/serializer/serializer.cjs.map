{"version":3,"sources":["../../src/serializer/serializer.ts"],"names":["Serializer","factories","Map","registerSerializable","ref","processors","aliases","register","toPlain","value","createSnapshot","fromPlain","fromSnapshot","createEmpty","Object","create","prototype","updateInstance","instance","update","loadSnapshot","R","pickBy","isDefined","deregister","className","extractClassName","delete","oldFactory","get","newFactory","SerializerError","key","entries","set","forEach","alias","aliasTarget","getFactory","clsName","factory","findFactory","targetClass","hasFactory","isFunction","Function","name","isSelfRef","excluded","Set","proto","traversePrototypeChain","has","serialize","rawData","output","_createOutputBuilder","getRefId","id","seen","SafeWeakMap","assertValidSnapshot","allowedTypes","snapshot","Array","from","values","join","toSerializable","rawValue","Serializable","Class","constructor","isSerializationRequired","SerializerSelfRefIdentifier","result","__serializer","__class","__ref","toString","__value","node","traverseWithUpdate","newValue","root","__version","Version","__root","traverseObject","path","content","toJSON","deserializeWithMeta","raw","extraClasses","instances","toDeserialize","contentRaw","isSerializerNode","String","SerializerRefIdentifier","data","RefPlaceholder","traverseNested","placeholder","final","JSON","parse","isRootNode","_obj","deserialize","response","_container","setProp","SafeWeakSet","stringify","updated","add","Task","task","resolvedValue","state","TaskState","RESOLVED","resolve","REJECTED","reject","SlidingTaskMap","config","windowSize","ttl","filter","_","newInstance","assign","slice","push","Number","Boolean","BigInt","Symbol","description","Date","toISOString","CacheFn","fn","options","isNative","getProp","global","isConstructor","obj","binds","getFunctionBinds","map","bound","toParsableForm","match","a","b","c","indexOf","p","p2","halveString","replace","trim","includes","arrowStart","bracketStart","fnPrefix","fnContent","nonReservedSymbols","split","x","every","parameters","startsWith","defineProperty","getOwnPropertyDescriptor","getPrototypeOf","hasMinLength","toBoundedFunction","Error","serializeError","deserializeError","RegExp","source","flags","WeakSet","WeakMap","WeakRef","primitiveToSerializableClass","undefined","ZodType","toJsonSchema","Buffer","AbortSignal","aborted","reason","controller","createAbortController","abort","signal","AbortController"],"mappings":"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","file":"serializer.cjs","sourcesContent":["/**\n * Copyright 2024 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport * as R from \"remeda\";\nimport { Serializable, SerializableClass } from \"@/internals/serializable.js\";\nimport { AnyConstructable, ClassConstructor, NamedFunction } from \"@/internals/types.js\";\nimport { SafeWeakMap, SafeWeakSet } from \"@/internals/helpers/weakRef.js\";\nimport { deserializeError, serializeError } from \"serialize-error\";\nimport { Version } from \"@/version.js\";\nimport {\n  extractClassName,\n  getFunctionBinds,\n  isRootNode,\n  isSerializationRequired,\n  isSerializerNode,\n  primitiveToSerializableClass,\n  RefPlaceholder,\n  RootNode,\n  SerializerNode,\n  SerializerRefIdentifier,\n  SerializerSelfRefIdentifier,\n  toBoundedFunction,\n  traverseObject,\n  traverseWithUpdate,\n} from \"@/serializer/utils.js\";\nimport { SlidingTaskMap, Task, TaskState } from \"promise-based-task\";\nimport { getProp, setProp } from \"@/internals/helpers/object.js\";\nimport { halveString } from \"@/internals/helpers/string.js\";\nimport { traversePrototypeChain } from \"@/internals/helpers/prototype.js\";\nimport { CacheFn } from \"@/cache/decoratorCache.js\";\nimport { SerializerError } from \"@/serializer/error.js\";\nimport { ZodType } from \"zod\";\nimport { toJsonSchema } from \"@/internals/helpers/schema.js\";\nimport { createAbortController } from \"@/internals/helpers/cancellation.js\";\nimport { hasMinLength } from \"@/internals/helpers/array.js\";\n\nexport interface SerializeFactory<A = unknown, B = unknown> {\n  ref: ClassConstructor<A> | NamedFunction<A>;\n  createEmpty?: () => A;\n  updateInstance?: (instance: A, update: A) => void;\n  toPlain: (value: A) => B;\n  fromPlain: (value: B) => A;\n}\n\nexport class Serializer {\n  private static factories = new Map<string, SerializeFactory<any, any>>();\n\n  static registerSerializable<A>(\n    ref: SerializableClass<A>,\n    processors?: Partial<Omit<SerializeFactory<Serializable<A>, A>, \"ref\">>,\n    aliases?: string[],\n  ) {\n    return Serializer.register(\n      ref,\n      {\n        toPlain: (value) => value.createSnapshot(),\n        fromPlain: (value) => ref.fromSnapshot(value),\n        createEmpty: () => Object.create(ref.prototype),\n        updateInstance: (instance, update) => instance.loadSnapshot(update),\n        ...R.pickBy(processors ?? {}, R.isDefined),\n      },\n      aliases,\n    );\n  }\n\n  static deregister(ref: ClassConstructor | NamedFunction) {\n    const className = extractClassName(ref);\n    Serializer.factories.delete(className);\n  }\n\n  static register<A, B = unknown>(\n    ref: ClassConstructor<A> | NamedFunction<A>,\n    processors: Omit<SerializeFactory<A, B>, \"ref\">,\n    aliases?: string[],\n  ): void {\n    const className = extractClassName(ref);\n    const oldFactory = Serializer.factories.get(className);\n    const newFactory: SerializeFactory<A, B> = {\n      ref,\n      ...processors,\n    };\n\n    if (oldFactory) {\n      if (oldFactory.ref !== ref) {\n        throw new SerializerError(`Factory for class \"${className}\" already exists!`);\n      }\n\n      for (const [key, value] of Serializer.factories.entries()) {\n        if (value === oldFactory) {\n          Serializer.factories.set(key, newFactory);\n        }\n      }\n    }\n    Serializer.factories.set(className, newFactory);\n\n    aliases?.forEach((alias) => {\n      const aliasTarget = Serializer.factories.get(alias);\n      if (!aliasTarget) {\n        this.factories.set(alias, newFactory);\n      } else if (aliasTarget !== newFactory) {\n        throw new SerializerError(\n          `Factory for class \"${className}\" already exists! Cannot add alias.`,\n        );\n      }\n    });\n  }\n\n  static getFactory(clsName: string): SerializeFactory {\n    const factory = Serializer.factories.get(clsName);\n    if (!factory) {\n      throw new SerializerError(`Class \"${clsName}\" was not found!`);\n    }\n    return factory;\n  }\n\n  static findFactory(value: unknown) {\n    let targetClass = extractClassName(value);\n    if (!Serializer.hasFactory(targetClass) && R.isFunction(value)) {\n      targetClass = Function.name;\n    }\n\n    if (Serializer.hasFactory(targetClass)) {\n      const factory = Serializer.getFactory(targetClass);\n      return { targetClass, factory, isSelfRef: factory.ref === value };\n    }\n\n    const excluded = new Set([null, Object.prototype]);\n    for (const proto of traversePrototypeChain(value, excluded)) {\n      const targetClass = extractClassName(proto);\n\n      const factory = this.factories.get(targetClass);\n      if (factory) {\n        return { targetClass, factory, isSelfRef: false };\n      }\n    }\n\n    throw new SerializerError(`Class \"${targetClass}\" was not found!`);\n  }\n\n  static hasFactory(clsName: string) {\n    return Serializer.factories.has(clsName);\n  }\n\n  static serialize<T>(rawData: T): string {\n    const output = Serializer._createOutputBuilder();\n    const getRefId = (() => {\n      let id = 0;\n      return () => {\n        id += 1;\n        return id;\n      };\n    })();\n\n    const seen = new SafeWeakMap<SerializerNode>();\n\n    const assertValidSnapshot = (() => {\n      const allowedTypes = new Set([\n        \"Number\",\n        \"String\",\n        \"Object\",\n        \"Array\",\n        \"Undefined\",\n        \"Null\",\n        \"Boolean\",\n      ]);\n      return (snapshot: unknown, factory: SerializeFactory) => {\n        const className = extractClassName(snapshot);\n\n        if (!allowedTypes.has(className)) {\n          throw new SerializerError(\n            `Cannot serialize '${className}' as a top level property. \"toPlain\" function in \"${extractClassName(factory.ref)}\" should return an ${Array.from(allowedTypes.values()).join(\",\")}.`,\n          );\n        }\n      };\n    })();\n\n    const toSerializable = (rawValue: unknown): SerializerNode | unknown => {\n      if (seen.has(rawValue)) {\n        return seen.get(rawValue);\n      }\n\n      if (rawValue instanceof Serializable && !this.hasFactory(extractClassName(rawValue))) {\n        const Class = rawValue.constructor as SerializableClass<T>;\n        Serializer.registerSerializable(Class);\n      }\n\n      const { targetClass, factory, isSelfRef } = Serializer.findFactory(rawValue);\n      if (!isSerializationRequired(factory.ref)) {\n        return rawValue;\n      }\n\n      const snapshot = isSelfRef ? SerializerSelfRefIdentifier : factory.toPlain(rawValue);\n      assertValidSnapshot(snapshot, factory);\n\n      const result: SerializerNode = {\n        __serializer: true,\n        __class: targetClass,\n        __ref: getRefId().toString(),\n        __value: snapshot,\n      };\n      seen.set(rawValue, result);\n\n      for (const node of traverseWithUpdate(snapshot)) {\n        const newValue = toSerializable(node.value);\n        if (newValue !== node.value) {\n          node.update(newValue);\n        }\n      }\n      return result;\n    };\n\n    const root: RootNode<T> = { __version: Version, __root: rawData };\n    traverseObject(root, ({ value, path }) => {\n      const content = toSerializable(value);\n      output.update(path, content);\n    });\n    return output.toJSON();\n  }\n\n  /** @internal */\n  static deserializeWithMeta<T = any>(\n    raw: string,\n    extraClasses?: SerializableClass<unknown>[],\n  ): RootNode<T> {\n    extraClasses?.forEach((ref) => Serializer.registerSerializable(ref));\n\n    const output = Serializer._createOutputBuilder<RootNode<T>>();\n    const instances = new Map<string, unknown>();\n\n    const toDeserialize = (contentRaw: unknown) => {\n      if (isSerializerNode(contentRaw)) {\n        const clsName = String(contentRaw.__class);\n        const factory = Serializer.getFactory(clsName);\n        const rawData = contentRaw.__value;\n\n        if (rawData === SerializerSelfRefIdentifier) {\n          return factory.ref;\n        }\n\n        if (rawData === SerializerRefIdentifier) {\n          if (!instances.has(contentRaw.__ref!)) {\n            throw new SerializerError(`Missing reference \"${contentRaw.__ref}\"!`);\n          }\n\n          const data = instances.get(contentRaw.__ref!)!;\n          if (data instanceof RefPlaceholder) {\n            return data.value;\n          }\n          return data;\n        }\n\n        const traverseNested = () => {\n          for (const node of traverseWithUpdate(rawData)) {\n            const newValue = toDeserialize(node.value);\n            if (newValue !== node.value) {\n              node.update(newValue);\n            }\n          }\n        };\n\n        // Handle circular dependencies\n        const placeholder = new RefPlaceholder<any>(contentRaw, factory);\n        instances.set(contentRaw.__ref!, placeholder);\n        traverseNested();\n        instances.set(contentRaw.__ref!, placeholder.final);\n        return placeholder.final;\n      }\n      return contentRaw;\n    };\n\n    const root = JSON.parse(raw);\n    if (!isRootNode(root)) {\n      throw new SerializerError(\"Provided data cannot be deserialized due to malformed format!\");\n    }\n\n    traverseObject(\n      root,\n      ({ value: contentRaw, path }) => {\n        output.update(path, toDeserialize(contentRaw));\n      },\n      (_obj) => isSerializerNode(_obj),\n    );\n    return output.get();\n  }\n\n  static deserialize<T = any>(raw: string, extraClasses?: SerializableClass<unknown>[]): T {\n    const response = Serializer.deserializeWithMeta(raw, extraClasses);\n    return response.__root;\n  }\n\n  protected static _createOutputBuilder<T>() {\n    return {\n      _container: {} as T,\n      get() {\n        return this._container;\n      },\n      update(path: readonly string[], value: any) {\n        setProp(this._container, path, value);\n      },\n      toJSON() {\n        const seen = new SafeWeakSet();\n\n        return JSON.stringify(this._container, (key, value) => {\n          if (seen.has(value) && isSerializerNode(value)) {\n            const updated: SerializerNode = {\n              ...value,\n              __value: SerializerRefIdentifier,\n            };\n            return updated;\n          }\n\n          seen.add(value);\n          return value;\n        });\n      },\n    };\n  }\n}\n\nSerializer.register(Task<any>, {\n  toPlain: (task) => ({ value: task.resolvedValue(), state: task.state }),\n  fromPlain: ({ state, value }) => {\n    const task = new Task();\n    if (state === TaskState.RESOLVED) {\n      task.resolve(value);\n    } else if (state === TaskState.REJECTED) {\n      task.reject(value);\n    } else {\n      task.reject(new SerializerError(\"Task cannot be solved due to serialization.\"));\n    }\n    task.resolve(value);\n    return task;\n  },\n  createEmpty: () => new Task(),\n  updateInstance: (instance, value) => {\n    instance.resolve(value);\n  },\n});\nSerializer.register(SlidingTaskMap, {\n  toPlain: (value) => ({\n    config: {\n      windowSize: value.windowSize,\n      ttl: value.ttl,\n    },\n    entries: Array.from(value.entries()).filter(([_, task]) => {\n      if (task instanceof Task) {\n        return task.state === TaskState.RESOLVED;\n      }\n      return true;\n    }),\n  }),\n  fromPlain: ({ entries, config }) => {\n    const instance = new SlidingTaskMap(config.windowSize, config.ttl);\n    for (const [key, value] of entries) {\n      instance.set(key, value);\n    }\n    return instance;\n  },\n  createEmpty: () => new SlidingTaskMap(1, 1000),\n  updateInstance: (instance, newInstance) => {\n    Object.assign(instance, { windowSize: newInstance.windowSize, ttl: newInstance.ttl });\n    newInstance.forEach((value, key) => instance.set(key, value));\n  },\n});\nSerializer.register(Map, {\n  toPlain: (value) => Array.from(value.entries()),\n  fromPlain: (value) => new Map(value),\n  createEmpty: () => new Map(),\n  updateInstance: (instance, update) => {\n    update.forEach(([key, value]) => instance.set(key, value));\n  },\n});\nSerializer.register(Set, {\n  toPlain: (value) => Array.from(value.values()),\n  fromPlain: (value) => new Set(value),\n  createEmpty: () => new Set(),\n  updateInstance: (instance, update) => {\n    update.forEach((value) => instance.add(value));\n  },\n});\nSerializer.register(Array, {\n  toPlain: (value) => value.slice(),\n  fromPlain: (value) => value.slice(),\n  createEmpty: () => [],\n  updateInstance: (value, update) => {\n    value.push(...update);\n  },\n});\nSerializer.register(Object, {\n  toPlain: (value) => Object.assign({}, value),\n  fromPlain: (value) => Object.assign({}, value),\n  createEmpty: () => ({}),\n  updateInstance: (value, update) => Object.assign(value, update),\n});\nSerializer.register(Number, {\n  toPlain: (value) => Number(value).toString(),\n  fromPlain: (value) => Number(value),\n});\nSerializer.register(String, {\n  toPlain: (value) => String(value),\n  fromPlain: (value) => String(value),\n});\nSerializer.register(Boolean, {\n  toPlain: (value) => Boolean(value),\n  fromPlain: (value) => Boolean(value),\n});\nSerializer.register(BigInt, {\n  toPlain: (value) => String(value),\n  fromPlain: (value) => BigInt(value),\n});\nSerializer.register(Symbol, {\n  toPlain: (value) => value.description,\n  fromPlain: (value) => Symbol(value),\n});\nSerializer.register(Date, {\n  toPlain: (value) => value.toISOString(),\n  fromPlain: (value) => new Date(value),\n});\nSerializer.register(CacheFn, {\n  toPlain: (value) => value.createSnapshot(),\n  fromPlain: (value) => CacheFn.create(value.fn, value.options),\n});\nSerializer.register(Function, {\n  toPlain: (value) => {\n    const isNative = getProp(global, [value.name]) === value;\n\n    function isConstructor(obj: any): obj is AnyConstructable {\n      return obj && !!obj.prototype && !!obj.prototype.constructor.name;\n    }\n\n    return {\n      name: value.name,\n      binds: getFunctionBinds(value).map((bound) => ({\n        name: isConstructor(bound) ? Serializer.findFactory(bound).targetClass : bound.name,\n        value: \"value\" in bound ? bound.value : null,\n      })),\n      fn: isNative ? \"\" : String(value),\n      isNative,\n    };\n  },\n  fromPlain: (value) => {\n    if (value.isNative) {\n      return getProp(global, [value.name])!;\n    }\n\n    const toParsableForm = (): string => {\n      let fn = value.fn;\n\n      if (fn.match(/^\\s*function.*?\\(/)) {\n        return fn;\n      }\n\n      const [a, b, c] = [fn.indexOf(\"=>\"), fn.indexOf(\"(\"), fn.indexOf(\"{\")];\n      if (a > -1) {\n        if (b === -1 || b > a || (c === -1 && c > a)) {\n          const [p, p2] = halveString(fn, \"=>\", false);\n          fn = `(${p.replace(\"async\", \"\").replace(\"*\", \"\").trim()})=>${p2}`;\n          fn = [p.includes(\"async\") && \"async \", p.includes(\"*\") && \"*\", fn]\n            .filter(Boolean)\n            .join(\" \");\n        }\n      }\n\n      const arrowStart = fn.indexOf(\"=>\");\n      const bracketStart = fn.indexOf(\"(\");\n\n      const [fnPrefix, fnContent = \"\"] =\n        bracketStart === -1 || bracketStart > arrowStart\n          ? halveString(fn, \"{\", true)\n          : halveString(fn, \"(\", true);\n\n      const nonReservedSymbols = fnPrefix\n        .trim()\n        .split(\" \")\n        .map((x) => x.trim())\n        .filter(Boolean)\n        .every((content) => [\"async\", \"*\"].includes(content));\n\n      if (nonReservedSymbols) {\n        return fn;\n      }\n\n      const name = value.name && fnPrefix.includes(value.name) ? value.name : \"\";\n      let parameters = \"\";\n      if (!fnContent.startsWith(\"(\")) {\n        if (fnPrefix.includes(\"(\")) {\n          parameters = (fnPrefix.match(/\\((.+)\\)/) ?? [null, \"\"])[1];\n        } else {\n          parameters = fnPrefix.replace(\"=>\", \"\").replace(\"async\", \"\").replace(\"*\", \"\");\n        }\n      }\n\n      return [\n        fnPrefix.includes(\"async\") && \"async \",\n        \"function\",\n        fnPrefix.includes(\"*\") && \"*\",\n        name && ` ${name}`,\n        parameters && `(${parameters})`,\n        fnContent,\n      ]\n        .filter(Boolean)\n        .join(\"\");\n    };\n\n    const binds = value?.binds ?? [];\n    const fn = Function(\n      ...binds.map((b) => b.name),\n      `return ${toParsableForm()}`,\n    )(...binds.map((b) => (b.value ? b.value : Serializer.getFactory(b.name)!.ref)));\n\n    if (value.name) {\n      Object.defineProperty(\n        fn,\n        \"name\",\n        Object.assign({}, Object.getOwnPropertyDescriptor(Object.getPrototypeOf(fn), \"name\"), {\n          value: value.name,\n        }),\n      );\n    }\n    Object.defineProperty(\n      fn,\n      \"toString\",\n      Object.assign({}, Object.getOwnPropertyDescriptor(Object.getPrototypeOf(fn), \"name\"), {\n        value: () => value.fn,\n      }),\n    );\n    return hasMinLength(binds, 1) ? toBoundedFunction(fn, binds) : fn;\n  },\n});\n\nSerializer.register(Error, {\n  toPlain: (value) => serializeError(value),\n  fromPlain: (value) => deserializeError(value),\n});\nSerializer.register(RegExp, {\n  toPlain: (value) => ({ source: value.source, flags: value.flags }),\n  fromPlain: (value) => new RegExp(value.source, value.flags),\n});\nSerializer.register(WeakSet, {\n  toPlain: () => {},\n  fromPlain: () => new WeakSet(),\n  createEmpty: () => new WeakSet(),\n  updateInstance: () => {},\n});\nSerializer.register(WeakMap, {\n  toPlain: () => {},\n  fromPlain: () => new WeakMap(),\n  createEmpty: () => new WeakMap(),\n  updateInstance: () => {},\n});\nSerializer.register(WeakRef, {\n  toPlain: () => {},\n  fromPlain: () => new WeakRef({}),\n});\nSerializer.register(primitiveToSerializableClass(undefined), {\n  toPlain: () => undefined,\n  fromPlain: () => undefined,\n});\nSerializer.register(primitiveToSerializableClass(null), {\n  toPlain: () => null,\n  fromPlain: () => null,\n});\n// @ts-expect-error\nSerializer.register(ZodType, {\n  toPlain: (value) => toJsonSchema(value),\n  fromPlain: () => {\n    throw new Error(\"JSONSchema cannot be converted to zod!\");\n  },\n});\nSerializer.register(Buffer, {\n  toPlain: (value: Buffer) => value.toString(\"base64\"),\n  fromPlain: (data) => Buffer.from(data, \"base64\"),\n});\nSerializer.register(AbortSignal, {\n  toPlain: (value: AbortSignal) => ({\n    aborted: value.aborted,\n    reason: value.reason,\n  }),\n  fromPlain: (data) => {\n    const controller = createAbortController();\n    if (data.aborted) {\n      controller.abort(data.reason);\n    }\n    return controller.signal;\n  },\n});\nSerializer.register(AbortController, {\n  toPlain: (value: AbortController) => ({\n    signal: value.signal,\n  }),\n  fromPlain: (data) => createAbortController(data.signal),\n});\n"]}