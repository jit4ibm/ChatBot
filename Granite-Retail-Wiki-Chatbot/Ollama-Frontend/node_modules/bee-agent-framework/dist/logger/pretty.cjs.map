{"version":3,"sources":["../../src/logger/pretty.js"],"names":["compose","fns","value","reduce","res","f","opts","pinoPretty","colorize","colorizeObjects","singleLine","hideObject","sync","levelFirst","translateTime","customPrettifiers","level","levels","TRACE","letters","icon","formatter","picocolors","gray","DEBUG","yellow","INFO","green","WARN","ERROR","red","FATAL","black","bgRed","fallback","logLevel","target","time","timestamp","dim","caller","key","log","colors","greenBright","messageFormat","messageKey"],"mappings":";;;;;;;;;;;;AAmBA,MAAMA,OACJ,mBAAA,MAAA,CAAA,CAAA,GAAIC,GACJ,KAAA,CAACC,UACCD,GAAIE,CAAAA,MAAAA,CAAO,CAACC,GAAAA,EAAKC,CAAMA,KAAAA,CAAAA,CAAED,GAAAA,CAAAA,EAAMF,KAAAA,CAFjC,EAAA,SAAA,CAAA;AAIF,IAAA,cAAA,2BAAgBI,IAAAA,KAAAA;AACd,EAAA,OAAOC,2BAAW,CAAA;IAChBC,QAAU,EAAA,IAAA;IACVC,eAAiB,EAAA,IAAA;IACjBC,UAAY,EAAA,IAAA;IACZC,UAAY,EAAA,KAAA;IACZC,IAAM,EAAA,IAAA;IACNC,UAAY,EAAA,IAAA;IACZ,GAAGP,IAAAA;IACHQ,aAAe,EAAA,UAAA;IACfC,iBAAmB,EAAA;AACjBC,MAAAA,KAAAA,EAAAA,CAAQ,MAAA;AACN,QAAA,MAAMC,MAAS,GAAA;UACbC,KAAO,EAAA;YAAEC,OAAS,EAAA,KAAA;YAAOC,IAAM,EAAA,WAAA;AAAMC,YAAAA,SAAAA,EAAWC,2BAAWC,CAAAA;AAAK,WAAA;UAChEC,KAAO,EAAA;YAAEL,OAAS,EAAA,KAAA;YAAOC,IAAM,EAAA,WAAA;AAAMC,YAAAA,SAAAA,EAAWC,2BAAWG,CAAAA;AAAO,WAAA;UAClEC,IAAM,EAAA;YAAEP,OAAS,EAAA,KAAA;YAAOC,IAAM,EAAA,cAAA;AAAMC,YAAAA,SAAAA,EAAWC,2BAAWK,CAAAA;AAAM,WAAA;UAChEC,IAAM,EAAA;YAAET,OAAS,EAAA,KAAA;YAAOC,IAAM,EAAA,cAAA;AAAMC,YAAAA,SAAAA,EAAWC,2BAAWG,CAAAA;AAAO,WAAA;UACjEI,KAAO,EAAA;YAAEV,OAAS,EAAA,KAAA;YAAOC,IAAM,EAAA,WAAA;AAAMC,YAAAA,SAAAA,EAAWC,2BAAWQ,CAAAA;AAAI,WAAA;UAC/DC,KAAO,EAAA;YACLZ,OAAS,EAAA,KAAA;YACTC,IAAM,EAAA,WAAA;AACNC,YAAAA,SAAAA,EAAWrB,OAAQsB,CAAAA,2BAAAA,CAAWU,KAAOV,EAAAA,2BAAAA,CAAWW,KAAK;AACvD;AACF,SAAA;AACA,QAAA,MAAMC,QAAW,GAAA;UAAEf,OAAS,EAAA,KAAA;UAAOC,IAAM,EAAA,iBAAA;AAAOC,UAAAA,SAAAA,EAAWC,2BAAWC,CAAAA;AAAK,SAAA;AAE3E,QAAA,OAAO,CAACY,QAAAA,KAAAA;AACN,UAAMC,MAAAA,MAAAA,GAASnB,MAAOkB,CAAAA,QAAAA,CAAaD,IAAAA,QAAAA;AACnC,UAAO,OAAA,CAAA,EAAGE,OAAOf,SAAUe,CAAAA,MAAAA,CAAOjB,OAAO,CAAA,CAAA,EAAA,EAAMiB,OAAOhB,IAAI,CAAA,CAAA,CAAA;AAC5D,SAAA;OACF,GAAA;AACAiB,MAAAA,IAAAA,kBAAOC,MAAAA,CAAAA,CAAAA,SAAAA,KAAchB,2BAAWiB,CAAAA,GAAAA,CAAID,SAAAA,CAA9B,EAAA,MAAA,CAAA;AACNE,MAAAA,MAAAA,kBAASA,MAAAA,CAAAA,CAAAA,MAAAA,EAAQC,GAAKC,EAAAA,GAAAA,EAAK,EAAEC,MAAAA,EAAa,KAAA,CAAA,EAAGA,MAAOC,CAAAA,WAAAA,CAAYJ,MAAAA,CAAAA,CAAxD,CAAA,EAAA,QAAA;AACV,KAAA;IACAK,aAAe,kBAAA,MAAA,CAAA,CAACH,KAAKI,UAAAA,KAAAA;AACnB,MAAO,OAAA,CAAA,EAAGJ,GAAII,CAAAA,UAAAA,CAAW,CAAA,CAAA;KADZ,EAAA,eAAA;GAGjB,CAAA;AACF,CAtCe,EAAA,SAAA","file":"pretty.cjs","sourcesContent":["/**\n * Copyright 2024 IBM Corp.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport pinoPretty from \"pino-pretty\";\nimport picocolors from \"picocolors\";\n\nconst compose =\n  (...fns) =>\n  (value) =>\n    fns.reduce((res, f) => f(res), value);\n\nexport default (opts) => {\n  return pinoPretty({\n    colorize: true,\n    colorizeObjects: true,\n    singleLine: true,\n    hideObject: false,\n    sync: true,\n    levelFirst: true,\n    ...opts,\n    translateTime: \"HH:MM:ss\",\n    customPrettifiers: {\n      level: (() => {\n        const levels = {\n          TRACE: { letters: \"TRC\", icon: \"🔎\", formatter: picocolors.gray },\n          DEBUG: { letters: \"DBG\", icon: \"🪲\", formatter: picocolors.yellow },\n          INFO: { letters: \"INF\", icon: \"ℹ️\", formatter: picocolors.green },\n          WARN: { letters: \"WRN\", icon: \"⚠️\", formatter: picocolors.yellow },\n          ERROR: { letters: \"ERR\", icon: \"🔥\", formatter: picocolors.red },\n          FATAL: {\n            letters: \"FTL\",\n            icon: \"💣\",\n            formatter: compose(picocolors.black, picocolors.bgRed),\n          },\n        };\n        const fallback = { letters: \"???\", icon: \"🤷‍\", formatter: picocolors.gray };\n\n        return (logLevel) => {\n          const target = levels[logLevel] || fallback;\n          return `${target.formatter(target.letters)}  ${target.icon} `;\n        };\n      })(),\n      time: (timestamp) => picocolors.dim(timestamp),\n      caller: (caller, key, log, { colors }) => `${colors.greenBright(caller)}`,\n    },\n    messageFormat: (log, messageKey) => {\n      return `${log[messageKey]}`;\n    },\n  });\n};\n"]}