import grpc, { Metadata } from '@grpc/grpc-js';
import * as R from 'remeda';
import { FrameworkError, ValueError } from '../../errors.js';
import protoLoader from '@grpc/proto-loader';
import { parseEnv } from '../../internals/env.js';
import { z } from 'zod';
import { Cache } from '../../cache/decoratorCache.js';
import { Serializable } from '../../internals/serializable.js';
import PQueue from 'p-queue-compat';
import { getProp } from '../../internals/helpers/object.js';

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function _ts_decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
  else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
__name(_ts_decorate, "_ts_decorate");
function _ts_metadata(k, v) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
}
__name(_ts_metadata, "_ts_metadata");
const GENERATION_PROTO_PATH = new URL("./proto/generation.proto", import.meta.url);
const NLP_PROTO_PATH = new URL("./proto/caikit_runtime_Nlp.proto", import.meta.url);
const defaultOptions = {
  clientShutdownDelay: 5 * 60 * 1e3,
  grpcClientOptions: {
    // This is needed, otherwise communication to DIPC cluster fails with "Dropped connection" error after +- 50 secs
    "grpc.keepalive_time_ms": 25e3,
    "grpc.max_receive_message_length": 32 * 1024 * 1024
  }
};
const grpcConfig = {
  longs: Number,
  enums: String,
  arrays: true,
  objects: true,
  oneofs: true,
  keepCase: true,
  defaults: true
};
const generationPackage = grpc.loadPackageDefinition(protoLoader.loadSync([
  GENERATION_PROTO_PATH.pathname
], grpcConfig));
const embeddingsPackage = grpc.loadPackageDefinition(protoLoader.loadSync([
  NLP_PROTO_PATH.pathname
], grpcConfig));
const GRPC_CLIENT_TTL = 15 * 60 * 1e3;
class Client extends Serializable {
  static {
    __name(this, "Client");
  }
  options;
  usedDefaultCredentials = false;
  getClient(modelId, factory) {
    const modelSpecificUrl = this.options.url.replace(/{model_id}/, modelId.replaceAll("/", "--"));
    const client = new factory(modelSpecificUrl, grpc.credentials.createSsl(Buffer.from(this.options.credentials.rootCert), Buffer.from(this.options.credentials.privateKey), Buffer.from(this.options.credentials.certChain)), this.options.grpcClientOptions);
    setTimeout(
      () => {
        try {
          client.close();
        } catch {
        }
      },
      /* empty */
      GRPC_CLIENT_TTL + this.options.clientShutdownDelay
    ).unref();
    return client;
  }
  getDefaultCredentials() {
    this.usedDefaultCredentials = true;
    return {
      rootCert: parseEnv("IBM_VLLM_ROOT_CERT", z.string()),
      privateKey: parseEnv("IBM_VLLM_PRIVATE_KEY", z.string()),
      certChain: parseEnv("IBM_VLLM_CERT_CHAIN", z.string())
    };
  }
  constructor(options) {
    super();
    this.options = {
      ...defaultOptions,
      ...options,
      url: options?.url ?? parseEnv("IBM_VLLM_URL", z.string()),
      credentials: options?.credentials ?? this.getDefaultCredentials()
    };
  }
  async modelInfo(request, options) {
    const client = this.getClient(request.model_id, generationPackage.fmaas.GenerationService);
    return this.wrapGrpcCall(client.modelInfo.bind(client))(request, options);
  }
  async generate(request, options) {
    const client = this.getClient(request.model_id, generationPackage.fmaas.GenerationService);
    return this.wrapGrpcCall(client.generate.bind(client))(request, options);
  }
  async generateStream(request, options) {
    const client = this.getClient(request.model_id, generationPackage.fmaas.GenerationService);
    return this.wrapGrpcStream(client.generateStream.bind(client))(request, options);
  }
  async tokenize(request, options) {
    const client = this.getClient(request.model_id, generationPackage.fmaas.GenerationService);
    return this.wrapGrpcCall(client.tokenize.bind(client))(request, options);
  }
  async embed(request, options) {
    const client = this.getClient(request.model_id, embeddingsPackage.caikit.runtime.Nlp.NlpService);
    return this.queues.embeddings.add(() => this.wrapGrpcCall(client.embeddingTasksPredict.bind(client))(request, options), {
      throwOnTimeout: true
    });
  }
  wrapGrpcCall(fn) {
    return (request, { signal, ...options } = {}) => {
      const metadata = new Metadata();
      const modelId = getProp(request, [
        "model_id"
      ]);
      if (modelId) {
        metadata.add("mm-model-id", modelId);
      }
      return new Promise((resolve, reject) => {
        const call = fn(request, metadata, options, (err, response) => {
          signal?.removeEventListener("abort", abortHandler);
          if (err) {
            reject(err);
          } else {
            if (response === void 0) {
              reject(new FrameworkError("Invalid response from GRPC server"));
            } else {
              resolve(response);
            }
          }
        });
        const abortHandler = /* @__PURE__ */ __name(() => call.cancel(), "abortHandler");
        signal?.addEventListener("abort", abortHandler, {
          once: true
        });
      });
    };
  }
  wrapGrpcStream(fn) {
    return async (request, { signal, ...options } = {}) => {
      const stream = fn(request, options);
      const abortHandler = /* @__PURE__ */ __name(() => stream.cancel(), "abortHandler");
      signal?.addEventListener("abort", abortHandler, {
        once: true
      });
      stream.addListener("close", () => signal?.removeEventListener("abort", abortHandler));
      return stream;
    };
  }
  createSnapshot() {
    if (!this.usedDefaultCredentials) {
      throw new ValueError("Cannot serialize a client with credentials passed directly. Use environment variables.");
    }
    return {
      options: R.omit(this.options, [
        "credentials"
      ])
    };
  }
  loadSnapshot(snapshot) {
    Object.assign(this, snapshot);
    this.options.credentials = this.getDefaultCredentials();
  }
  get queues() {
    return {
      embeddings: new PQueue({
        concurrency: this.options.limits?.concurrency?.embeddings ?? 5,
        throwOnTimeout: true
      })
    };
  }
}
_ts_decorate([
  Cache({
    ttl: GRPC_CLIENT_TTL
  }),
  _ts_metadata("design:type", Function),
  _ts_metadata("design:paramtypes", [
    String,
    typeof SubtypeConstructor === "undefined" ? Object : SubtypeConstructor
  ]),
  _ts_metadata("design:returntype", typeof T === "undefined" ? Object : T)
], Client.prototype, "getClient", null);
_ts_decorate([
  Cache({
    enumerable: false
  }),
  _ts_metadata("design:type", void 0),
  _ts_metadata("design:paramtypes", [])
], Client.prototype, "queues", null);

export { Client };
//# sourceMappingURL=client.js.map
//# sourceMappingURL=client.js.map