import { LLMMeta, EmbeddingOptions, EmbeddingOutput, BaseLLMTokenizeOutput, GenerateOptions, StreamGenerateOptions, AsyncStream, ExecutionOptions, BaseLLMEvents, LLMCache } from '../../llms/base.js';
import { ChatLLMOutput, ChatLLMGenerateEvents, ChatLLM } from '../../llms/chat.js';
import { BaseMessage } from '../../llms/primitives/message.js';
import { E as Emitter } from '../../emitter-DRfJC1TP.js';
import { Groq } from 'groq-sdk';
import { GetRunContext } from '../../context.js';
import { ChatCompletionCreateParams } from 'groq-sdk/resources/chat/completions';
import '../../errors.js';
import '../../internals/types.js';
import '../../internals/helpers/guards.js';
import '../../internals/serializable.js';
import '../../cache/base.js';
import 'promise-based-task';
import '../../internals/helpers/promise.js';

type Parameters = Omit<ChatCompletionCreateParams, "stream" | "messages" | "model">;
type Response = Omit<Groq.Chat.ChatCompletionChunk, "object">;
declare class ChatGroqOutput extends ChatLLMOutput {
    readonly responses: Response[];
    constructor(response: Response);
    get messages(): BaseMessage[];
    getTextContent(): string;
    merge(other: ChatGroqOutput): void;
    toString(): string;
    createSnapshot(): {
        responses: Response[];
    };
    loadSnapshot(snapshot: ReturnType<typeof this.createSnapshot>): void;
}
interface Input {
    modelId?: string;
    client?: Groq;
    parameters?: Parameters;
    executionOptions?: ExecutionOptions;
    cache?: LLMCache<ChatGroqOutput>;
}
type GroqChatLLMEvents = ChatLLMGenerateEvents<ChatGroqOutput>;
declare class GroqChatLLM extends ChatLLM<ChatGroqOutput> {
    readonly emitter: Emitter<GroqChatLLMEvents>;
    readonly client: Groq;
    readonly parameters: Partial<Parameters>;
    constructor({ client, modelId, parameters, executionOptions, cache, }?: Input);
    meta(): Promise<LLMMeta>;
    embed(input: BaseMessage[][], options?: EmbeddingOptions): Promise<EmbeddingOutput>;
    tokenize(input: BaseMessage[]): Promise<BaseLLMTokenizeOutput>;
    protected _prepareRequest(input: BaseMessage[], options: GenerateOptions): ChatCompletionCreateParams;
    protected _generate(input: BaseMessage[], options: GenerateOptions, run: GetRunContext<typeof this>): Promise<ChatGroqOutput>;
    protected _stream(input: BaseMessage[], options: Partial<StreamGenerateOptions>, run: GetRunContext<typeof this>): AsyncStream<ChatGroqOutput>;
    createSnapshot(): {
        parameters: Partial<Parameters>;
        client: Groq;
        modelId: string;
        executionOptions: ExecutionOptions;
        emitter: Emitter<BaseLLMEvents<unknown, ChatGroqOutput>>;
        cache: LLMCache<ChatGroqOutput>;
    };
}

export { ChatGroqOutput, GroqChatLLM, type GroqChatLLMEvents };
