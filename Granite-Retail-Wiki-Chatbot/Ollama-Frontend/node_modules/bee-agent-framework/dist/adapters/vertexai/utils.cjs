'use strict';

var remeda = require('remeda');
var serializer_cjs = require('../../serializer/serializer.cjs');
var vertexai = require('@google-cloud/vertexai');
var object_cjs = require('../../internals/helpers/object.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
function processContentResponse(response) {
  return response.candidates?.flatMap((candidate) => candidate.content.parts.filter((part) => part.text).map((part) => part.text)).join() || "Empty";
}
__name(processContentResponse, "processContentResponse");
function getTokenCount(response) {
  return response.usageMetadata?.totalTokenCount ?? Infinity;
}
__name(getTokenCount, "getTokenCount");
function registerVertexAI() {
  serializer_cjs.Serializer.register(vertexai.VertexAI, {
    toPlain: /* @__PURE__ */ __name((value) => ({
      project: object_cjs.getPropStrict(value, "project"),
      location: object_cjs.getPropStrict(value, "location")
    }), "toPlain"),
    fromPlain: /* @__PURE__ */ __name((value) => {
      return new vertexai.VertexAI({
        project: value.project,
        location: value.location
      });
    }, "fromPlain")
  });
}
__name(registerVertexAI, "registerVertexAI");
function createModel(client, modelId, schema, params) {
  const modelParams = {
    model: modelId,
    ...params
  };
  if (schema) {
    const schemaJson = remeda.isString(schema) ? JSON.parse(schema) : schema;
    modelParams.generationConfig = {
      ...modelParams.generationConfig,
      responseSchema: schemaJson,
      responseMimeType: "application/json"
    };
  }
  return client.getGenerativeModel(modelParams);
}
__name(createModel, "createModel");

exports.createModel = createModel;
exports.getTokenCount = getTokenCount;
exports.processContentResponse = processContentResponse;
exports.registerVertexAI = registerVertexAI;
//# sourceMappingURL=utils.cjs.map
//# sourceMappingURL=utils.cjs.map