'use strict';

var base_cjs = require('./base.cjs');
var zod = require('zod');
var remeda = require('remeda');
var emitter_cjs = require('../emitter/emitter.cjs');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const documentSchema = zod.z.object({
  text: zod.string()
}).passthrough();
class SimilarityToolOutput extends base_cjs.JSONToolOutput {
  static {
    __name(this, "SimilarityToolOutput");
  }
}
class SimilarityTool extends base_cjs.Tool {
  static {
    __name(this, "SimilarityTool");
  }
  name = "Similarity";
  description = "Extract relevant information from documents.";
  emitter = emitter_cjs.Emitter.root.child({
    namespace: [
      "tool",
      "similarity"
    ],
    creator: this
  });
  inputSchema() {
    return zod.z.object({
      query: zod.z.string(),
      documents: zod.z.array(documentSchema)
    });
  }
  static {
    this.register();
  }
  async _run({ query, documents }, options, run) {
    return remeda.pipe(await this.options.provider({
      query,
      documents
    }, options?.provider, run), remeda.map(({ score }, idx) => ({
      documentIndex: idx,
      score
    })), remeda.sortBy([
      remeda.prop("score"),
      "desc"
    ]), remeda.take(options?.maxResults ?? this.options.maxResults ?? Infinity), (data) => new SimilarityToolOutput(data.map(({ documentIndex, score }) => ({
      document: documents[documentIndex],
      index: documentIndex,
      score
    }))));
  }
}

exports.SimilarityTool = SimilarityTool;
exports.SimilarityToolOutput = SimilarityToolOutput;
//# sourceMappingURL=similarity.cjs.map
//# sourceMappingURL=similarity.cjs.map