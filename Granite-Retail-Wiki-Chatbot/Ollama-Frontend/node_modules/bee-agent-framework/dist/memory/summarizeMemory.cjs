'use strict';

var message_cjs = require('../llms/primitives/message.cjs');
var base_cjs = require('./base.cjs');
var template_cjs = require('../template.cjs');
var utils_cjs = require('../serializer/utils.cjs');
var zod = require('zod');

var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
const SummarizeMemoryTemplate = new template_cjs.PromptTemplate({
  schema: zod.z.object({
    summary: zod.z.string()
  }),
  template: `Progressively summarize the lines of conversation provided, adding onto the previous summary returning a new summary.

Current summary:
{{summary}}`
});
class SummarizeMemory extends base_cjs.BaseMemory {
  static {
    __name(this, "SummarizeMemory");
  }
  summary = "";
  template;
  llm;
  constructor(config) {
    super();
    this.template = config.template ?? SummarizeMemoryTemplate;
    this.llm = config.llm;
  }
  static {
    this.register();
  }
  get messages() {
    const currentSummary = this.summary;
    if (!currentSummary) {
      return [];
    }
    return [
      message_cjs.BaseMessage.of({
        role: message_cjs.Role.ASSISTANT,
        text: currentSummary
      })
    ];
  }
  // eslint-disable-next-line unused-imports/no-unused-vars
  async delete(message) {
    return false;
  }
  async add(message, _index) {
    const response = await this.llm.generate([
      message_cjs.BaseMessage.of({
        role: message_cjs.Role.SYSTEM,
        text: this.template.render({
          summary: this.summary
        })
      }),
      message_cjs.BaseMessage.of({
        role: message_cjs.Role.ASSISTANT,
        text: `New lines of conversation:
${message.role}: ${message.text}

New summary:
`
      })
    ]);
    this.summary = response.getTextContent();
  }
  reset() {
    this.summary = "";
  }
  createSnapshot() {
    return {
      summary: this.summary,
      template: this.template,
      llm: this.llm,
      messages: utils_cjs.shallowCopy(this.messages)
    };
  }
  loadSnapshot(state) {
    Object.assign(this, state);
  }
}

exports.SummarizeMemory = SummarizeMemory;
exports.SummarizeMemoryTemplate = SummarizeMemoryTemplate;
//# sourceMappingURL=summarizeMemory.cjs.map
//# sourceMappingURL=summarizeMemory.cjs.map