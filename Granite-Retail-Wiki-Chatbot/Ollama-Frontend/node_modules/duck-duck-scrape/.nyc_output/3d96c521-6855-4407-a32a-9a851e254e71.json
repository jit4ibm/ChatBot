{"C:\\Users\\sugge\\Documents\\GitHub\\Snazzah\\duck-duck-scrape\\src\\search\\images.ts":{"path":"C:\\Users\\sugge\\Documents\\GitHub\\Snazzah\\duck-duck-scrape\\src\\search\\images.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":136}},"4":{"start":{"line":7,"column":24},"end":{"line":7,"column":48}},"5":{"start":{"line":8,"column":17},"end":{"line":8,"column":51}},"6":{"start":{"line":9,"column":15},"end":{"line":9,"column":33}},"7":{"start":{"line":12,"column":0},"end":{"line":23,"column":62}},"8":{"start":{"line":14,"column":4},"end":{"line":14,"column":26}},"9":{"start":{"line":16,"column":4},"end":{"line":16,"column":33}},"10":{"start":{"line":18,"column":4},"end":{"line":18,"column":35}},"11":{"start":{"line":20,"column":4},"end":{"line":20,"column":33}},"12":{"start":{"line":22,"column":4},"end":{"line":22,"column":41}},"13":{"start":{"line":26,"column":0},"end":{"line":37,"column":62}},"14":{"start":{"line":28,"column":4},"end":{"line":28,"column":26}},"15":{"start":{"line":30,"column":4},"end":{"line":30,"column":38}},"16":{"start":{"line":32,"column":4},"end":{"line":32,"column":37}},"17":{"start":{"line":34,"column":4},"end":{"line":34,"column":29}},"18":{"start":{"line":36,"column":4},"end":{"line":36,"column":45}},"19":{"start":{"line":40,"column":0},"end":{"line":49,"column":68}},"20":{"start":{"line":42,"column":4},"end":{"line":42,"column":28}},"21":{"start":{"line":44,"column":4},"end":{"line":44,"column":37}},"22":{"start":{"line":46,"column":4},"end":{"line":46,"column":33}},"23":{"start":{"line":48,"column":4},"end":{"line":48,"column":33}},"24":{"start":{"line":52,"column":0},"end":{"line":83,"column":65}},"25":{"start":{"line":54,"column":4},"end":{"line":54,"column":27}},"26":{"start":{"line":56,"column":4},"end":{"line":56,"column":34}},"27":{"start":{"line":58,"column":4},"end":{"line":58,"column":49}},"28":{"start":{"line":60,"column":4},"end":{"line":60,"column":30}},"29":{"start":{"line":62,"column":4},"end":{"line":62,"column":36}},"30":{"start":{"line":64,"column":4},"end":{"line":64,"column":36}},"31":{"start":{"line":66,"column":4},"end":{"line":66,"column":34}},"32":{"start":{"line":68,"column":4},"end":{"line":68,"column":32}},"33":{"start":{"line":70,"column":4},"end":{"line":70,"column":32}},"34":{"start":{"line":72,"column":4},"end":{"line":72,"column":34}},"35":{"start":{"line":74,"column":4},"end":{"line":74,"column":34}},"36":{"start":{"line":76,"column":4},"end":{"line":76,"column":32}},"37":{"start":{"line":78,"column":4},"end":{"line":78,"column":32}},"38":{"start":{"line":80,"column":4},"end":{"line":80,"column":32}},"39":{"start":{"line":82,"column":4},"end":{"line":82,"column":34}},"40":{"start":{"line":86,"column":0},"end":{"line":101,"column":71}},"41":{"start":{"line":88,"column":4},"end":{"line":88,"column":29}},"42":{"start":{"line":90,"column":4},"end":{"line":90,"column":45}},"43":{"start":{"line":92,"column":4},"end":{"line":92,"column":45}},"44":{"start":{"line":94,"column":4},"end":{"line":94,"column":36}},"45":{"start":{"line":96,"column":4},"end":{"line":96,"column":61}},"46":{"start":{"line":98,"column":4},"end":{"line":98,"column":38}},"47":{"start":{"line":100,"column":4},"end":{"line":100,"column":63}},"48":{"start":{"line":102,"column":23},"end":{"line":106,"column":1}},"49":{"start":{"line":116,"column":4},"end":{"line":117,"column":50}},"50":{"start":{"line":117,"column":8},"end":{"line":117,"column":50}},"51":{"start":{"line":118,"column":4},"end":{"line":121,"column":39}},"52":{"start":{"line":119,"column":8},"end":{"line":119,"column":33}},"53":{"start":{"line":121,"column":8},"end":{"line":121,"column":39}},"54":{"start":{"line":122,"column":14},"end":{"line":122,"column":25}},"55":{"start":{"line":123,"column":4},"end":{"line":124,"column":68}},"56":{"start":{"line":124,"column":8},"end":{"line":124,"column":68}},"57":{"start":{"line":133,"column":24},"end":{"line":141,"column":5}},"58":{"start":{"line":142,"column":21},"end":{"line":142,"column":141}},"59":{"start":{"line":143,"column":4},"end":{"line":144,"column":52}},"60":{"start":{"line":144,"column":8},"end":{"line":144,"column":52}},"61":{"start":{"line":145,"column":25},"end":{"line":145,"column":62}},"62":{"start":{"line":146,"column":4},"end":{"line":153,"column":6}},"63":{"start":{"line":149,"column":54},"end":{"line":152,"column":9}},"64":{"start":{"line":155,"column":0},"end":{"line":155,"column":36}},"65":{"start":{"line":157,"column":4},"end":{"line":157,"column":57}},"66":{"start":{"line":158,"column":4},"end":{"line":159,"column":85}},"67":{"start":{"line":159,"column":8},"end":{"line":159,"column":85}},"68":{"start":{"line":163,"column":4},"end":{"line":164,"column":62}},"69":{"start":{"line":164,"column":8},"end":{"line":164,"column":62}},"70":{"start":{"line":165,"column":4},"end":{"line":166,"column":68}},"71":{"start":{"line":166,"column":8},"end":{"line":166,"column":68}},"72":{"start":{"line":167,"column":4},"end":{"line":168,"column":63}},"73":{"start":{"line":168,"column":8},"end":{"line":168,"column":63}},"74":{"start":{"line":169,"column":4},"end":{"line":170,"column":80}},"75":{"start":{"line":170,"column":8},"end":{"line":170,"column":80}},"76":{"start":{"line":171,"column":4},"end":{"line":172,"column":80}},"77":{"start":{"line":172,"column":8},"end":{"line":172,"column":80}},"78":{"start":{"line":173,"column":4},"end":{"line":174,"column":84}},"79":{"start":{"line":174,"column":8},"end":{"line":174,"column":84}},"80":{"start":{"line":175,"column":4},"end":{"line":176,"column":76}},"81":{"start":{"line":176,"column":8},"end":{"line":176,"column":76}},"82":{"start":{"line":177,"column":4},"end":{"line":178,"column":80}},"83":{"start":{"line":178,"column":8},"end":{"line":178,"column":80}},"84":{"start":{"line":179,"column":4},"end":{"line":180,"column":61}},"85":{"start":{"line":180,"column":8},"end":{"line":180,"column":61}},"86":{"start":{"line":181,"column":4},"end":{"line":181,"column":19}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":12,"column":1},"end":{"line":12,"column":2}},"loc":{"start":{"line":12,"column":22},"end":{"line":23,"column":1}},"line":12},"2":{"name":"(anonymous_2)","decl":{"start":{"line":26,"column":1},"end":{"line":26,"column":2}},"loc":{"start":{"line":26,"column":22},"end":{"line":37,"column":1}},"line":26},"3":{"name":"(anonymous_3)","decl":{"start":{"line":40,"column":1},"end":{"line":40,"column":2}},"loc":{"start":{"line":40,"column":24},"end":{"line":49,"column":1}},"line":40},"4":{"name":"(anonymous_4)","decl":{"start":{"line":52,"column":1},"end":{"line":52,"column":2}},"loc":{"start":{"line":52,"column":23},"end":{"line":83,"column":1}},"line":52},"5":{"name":"(anonymous_5)","decl":{"start":{"line":86,"column":1},"end":{"line":86,"column":2}},"loc":{"start":{"line":86,"column":25},"end":{"line":101,"column":1}},"line":86},"6":{"name":"searchImages","decl":{"start":{"line":115,"column":15},"end":{"line":115,"column":27}},"loc":{"start":{"line":115,"column":59},"end":{"line":154,"column":1}},"line":115},"7":{"name":"(anonymous_7)","decl":{"start":{"line":149,"column":42},"end":{"line":149,"column":43}},"loc":{"start":{"line":149,"column":54},"end":{"line":152,"column":9}},"line":149},"8":{"name":"sanityCheck","decl":{"start":{"line":156,"column":9},"end":{"line":156,"column":20}},"loc":{"start":{"line":156,"column":30},"end":{"line":182,"column":1}},"line":156}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":23,"column":15},"end":{"line":23,"column":60}},"type":"binary-expr","locations":[{"start":{"line":23,"column":15},"end":{"line":23,"column":32}},{"start":{"line":23,"column":37},"end":{"line":23,"column":59}}],"line":23},"4":{"loc":{"start":{"line":37,"column":15},"end":{"line":37,"column":60}},"type":"binary-expr","locations":[{"start":{"line":37,"column":15},"end":{"line":37,"column":32}},{"start":{"line":37,"column":37},"end":{"line":37,"column":59}}],"line":37},"5":{"loc":{"start":{"line":49,"column":17},"end":{"line":49,"column":66}},"type":"binary-expr","locations":[{"start":{"line":49,"column":17},"end":{"line":49,"column":36}},{"start":{"line":49,"column":41},"end":{"line":49,"column":65}}],"line":49},"6":{"loc":{"start":{"line":83,"column":16},"end":{"line":83,"column":63}},"type":"binary-expr","locations":[{"start":{"line":83,"column":16},"end":{"line":83,"column":34}},{"start":{"line":83,"column":39},"end":{"line":83,"column":62}}],"line":83},"7":{"loc":{"start":{"line":101,"column":18},"end":{"line":101,"column":69}},"type":"binary-expr","locations":[{"start":{"line":101,"column":18},"end":{"line":101,"column":38}},{"start":{"line":101,"column":43},"end":{"line":101,"column":68}}],"line":101},"8":{"loc":{"start":{"line":116,"column":4},"end":{"line":117,"column":50}},"type":"if","locations":[{"start":{"line":116,"column":4},"end":{"line":117,"column":50}},{"start":{"line":116,"column":4},"end":{"line":117,"column":50}}],"line":116},"9":{"loc":{"start":{"line":118,"column":4},"end":{"line":121,"column":39}},"type":"if","locations":[{"start":{"line":118,"column":4},"end":{"line":121,"column":39}},{"start":{"line":118,"column":4},"end":{"line":121,"column":39}}],"line":118},"10":{"loc":{"start":{"line":123,"column":4},"end":{"line":124,"column":68}},"type":"if","locations":[{"start":{"line":123,"column":4},"end":{"line":124,"column":68}},{"start":{"line":123,"column":4},"end":{"line":124,"column":68}}],"line":123},"11":{"loc":{"start":{"line":138,"column":11},"end":{"line":138,"column":48}},"type":"cond-expr","locations":[{"start":{"line":138,"column":38},"end":{"line":138,"column":41}},{"start":{"line":138,"column":44},"end":{"line":138,"column":48}}],"line":138},"12":{"loc":{"start":{"line":140,"column":18},"end":{"line":140,"column":37}},"type":"binary-expr","locations":[{"start":{"line":140,"column":18},"end":{"line":140,"column":32}},{"start":{"line":140,"column":36},"end":{"line":140,"column":37}}],"line":140},"13":{"loc":{"start":{"line":143,"column":4},"end":{"line":144,"column":52}},"type":"if","locations":[{"start":{"line":143,"column":4},"end":{"line":144,"column":52}},{"start":{"line":143,"column":4},"end":{"line":144,"column":52}}],"line":143},"14":{"loc":{"start":{"line":158,"column":4},"end":{"line":159,"column":85}},"type":"if","locations":[{"start":{"line":158,"column":4},"end":{"line":159,"column":85}},{"start":{"line":158,"column":4},"end":{"line":159,"column":85}}],"line":158},"15":{"loc":{"start":{"line":163,"column":4},"end":{"line":164,"column":62}},"type":"if","locations":[{"start":{"line":163,"column":4},"end":{"line":164,"column":62}},{"start":{"line":163,"column":4},"end":{"line":164,"column":62}}],"line":163},"16":{"loc":{"start":{"line":165,"column":4},"end":{"line":166,"column":68}},"type":"if","locations":[{"start":{"line":165,"column":4},"end":{"line":166,"column":68}},{"start":{"line":165,"column":4},"end":{"line":166,"column":68}}],"line":165},"17":{"loc":{"start":{"line":167,"column":4},"end":{"line":168,"column":63}},"type":"if","locations":[{"start":{"line":167,"column":4},"end":{"line":168,"column":63}},{"start":{"line":167,"column":4},"end":{"line":168,"column":63}}],"line":167},"18":{"loc":{"start":{"line":167,"column":8},"end":{"line":167,"column":61}},"type":"binary-expr","locations":[{"start":{"line":167,"column":8},"end":{"line":167,"column":23}},{"start":{"line":167,"column":27},"end":{"line":167,"column":61}}],"line":167},"19":{"loc":{"start":{"line":169,"column":4},"end":{"line":170,"column":80}},"type":"if","locations":[{"start":{"line":169,"column":4},"end":{"line":170,"column":80}},{"start":{"line":169,"column":4},"end":{"line":170,"column":80}}],"line":169},"20":{"loc":{"start":{"line":169,"column":8},"end":{"line":169,"column":72}},"type":"binary-expr","locations":[{"start":{"line":169,"column":8},"end":{"line":169,"column":20}},{"start":{"line":169,"column":24},"end":{"line":169,"column":72}}],"line":169},"21":{"loc":{"start":{"line":171,"column":4},"end":{"line":172,"column":80}},"type":"if","locations":[{"start":{"line":171,"column":4},"end":{"line":172,"column":80}},{"start":{"line":171,"column":4},"end":{"line":172,"column":80}}],"line":171},"22":{"loc":{"start":{"line":171,"column":8},"end":{"line":171,"column":72}},"type":"binary-expr","locations":[{"start":{"line":171,"column":8},"end":{"line":171,"column":20}},{"start":{"line":171,"column":24},"end":{"line":171,"column":72}}],"line":171},"23":{"loc":{"start":{"line":173,"column":4},"end":{"line":174,"column":84}},"type":"if","locations":[{"start":{"line":173,"column":4},"end":{"line":174,"column":84}},{"start":{"line":173,"column":4},"end":{"line":174,"column":84}}],"line":173},"24":{"loc":{"start":{"line":173,"column":8},"end":{"line":173,"column":78}},"type":"binary-expr","locations":[{"start":{"line":173,"column":8},"end":{"line":173,"column":22}},{"start":{"line":173,"column":26},"end":{"line":173,"column":78}}],"line":173},"25":{"loc":{"start":{"line":175,"column":4},"end":{"line":176,"column":76}},"type":"if","locations":[{"start":{"line":175,"column":4},"end":{"line":176,"column":76}},{"start":{"line":175,"column":4},"end":{"line":176,"column":76}}],"line":175},"26":{"loc":{"start":{"line":175,"column":8},"end":{"line":175,"column":75}},"type":"binary-expr","locations":[{"start":{"line":175,"column":8},"end":{"line":175,"column":21}},{"start":{"line":175,"column":25},"end":{"line":175,"column":75}}],"line":175},"27":{"loc":{"start":{"line":177,"column":4},"end":{"line":178,"column":80}},"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":178,"column":80}},{"start":{"line":177,"column":4},"end":{"line":178,"column":80}}],"line":177},"28":{"loc":{"start":{"line":177,"column":8},"end":{"line":177,"column":81}},"type":"binary-expr","locations":[{"start":{"line":177,"column":8},"end":{"line":177,"column":23}},{"start":{"line":177,"column":27},"end":{"line":177,"column":81}}],"line":177},"29":{"loc":{"start":{"line":179,"column":4},"end":{"line":180,"column":61}},"type":"if","locations":[{"start":{"line":179,"column":4},"end":{"line":180,"column":61}},{"start":{"line":179,"column":4},"end":{"line":180,"column":61}}],"line":179},"30":{"loc":{"start":{"line":179,"column":8},"end":{"line":179,"column":54}},"type":"binary-expr","locations":[{"start":{"line":179,"column":8},"end":{"line":179,"column":19}},{"start":{"line":179,"column":23},"end":{"line":179,"column":54}}],"line":179}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":1,"18":1,"19":1,"20":1,"21":1,"22":1,"23":1,"24":1,"25":1,"26":1,"27":1,"28":1,"29":1,"30":1,"31":1,"32":1,"33":1,"34":1,"35":1,"36":1,"37":1,"38":1,"39":1,"40":1,"41":1,"42":1,"43":1,"44":1,"45":1,"46":1,"47":1,"48":1,"49":16,"50":1,"51":15,"52":1,"53":14,"54":5,"55":5,"56":1,"57":5,"58":5,"59":5,"60":1,"61":4,"62":4,"63":300,"64":1,"65":14,"66":14,"67":1,"68":13,"69":1,"70":12,"71":1,"72":11,"73":1,"74":10,"75":1,"76":9,"77":1,"78":8,"79":1,"80":7,"81":1,"82":6,"83":1,"84":5,"85":1,"86":4},"f":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":16,"7":300,"8":14},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[1,1],"4":[1,1],"5":[1,1],"6":[1,1],"7":[1,1],"8":[1,15],"9":[1,14],"10":[1,4],"11":[1,4],"12":[5,5],"13":[1,4],"14":[1,13],"15":[1,12],"16":[1,11],"17":[1,10],"18":[11,11],"19":[1,9],"20":[10,1],"21":[1,8],"22":[9,1],"23":[1,7],"24":[8,1],"25":[1,6],"26":[7,1],"27":[1,5],"28":[6,1],"29":[1,4],"30":[5,5]},"inputSourceMap":{"version":3,"file":"C:/Users/sugge/Documents/GitHub/Snazzah/duck-duck-scrape/src/search/images.ts","sources":["C:/Users/sugge/Documents/GitHub/Snazzah/duck-duck-scrape/src/search/images.ts"],"names":[],"mappings":"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","sourcesContent":["import { decode } from 'html-entities';\nimport needle, { NeedleOptions } from 'needle';\n\nimport { DuckbarImageResult, DuckbarResponse } from '../types';\nimport { ensureJSON, getVQD, queryString, SafeSearchType } from '../util';\n\n/** The types of image sizes. */\nexport enum ImageSize {\n  /** Any size. */\n  ALL = '',\n  /** Small size, less than 200x200. */\n  SMALL = 'Small',\n  /** Medium size, approx. between 200x200 and 500x500. */\n  MEDIUM = 'Medium',\n  /** Large size, approx. between 500x500 and 2000x2000. */\n  LARGE = 'Large',\n  /** Wallpaper size, larger than 1200x1200. */\n  WALLPAPER = 'Wallpaper'\n}\n\n/** The types of images. */\nexport enum ImageType {\n  /** Any images. */\n  ALL = '',\n  /** Any regular photos. */\n  PHOTOGRAPH = 'photo',\n  /** Clipart. */\n  CLIPART = 'clipart',\n  /** Animated GIFs. */\n  GIF = 'gif',\n  /** Transparent photos. */\n  TRANSPARENT = 'transparent'\n}\n\n/** The types of image layouts. */\nexport enum ImageLayout {\n  /** Any size of images. */\n  ALL = '',\n  /** Square images. Images may not be exactly square. */\n  SQUARE = 'Square',\n  /** Tall images. More height than width. */\n  TALL = 'Tall',\n  /** Wide images. More width than height. */\n  WIDE = 'Wide'\n}\n\n/** The types of image colors. */\nexport enum ImageColor {\n  /** Any image. */\n  ALL = '',\n  /** Any image with color. */\n  COLOR = 'color',\n  /** Any monochome images. */\n  BLACK_AND_WHITE = 'Monochrome',\n  /** Mostly red images. */\n  RED = 'Red',\n  /** Mostly orange images. */\n  ORANGE = 'Orange',\n  /** Mostly yellow images. */\n  YELLOW = 'Yellow',\n  /** Mostly green images. */\n  GREEN = 'Green',\n  /** Mostly blue images. */\n  BLUE = 'Blue',\n  /** Mostly pink images. */\n  PINK = 'Pink',\n  /** Mostly brown images. */\n  BROWN = 'Brown',\n  /** Mostly black images. */\n  BLACK = 'Black',\n  /** Mostly gray images. */\n  GRAY = 'Gray',\n  /** Alias for `GRAY`. */\n  GREY = 'Gray',\n  /** Mostly teal images. */\n  TEAL = 'Teal',\n  /** Mostly white images. */\n  WHITE = 'White'\n}\n\n/** The types of image licenses. */\nexport enum ImageLicense {\n  /** Any image license. */\n  ALL = '',\n  /** All Creative Commons. */\n  CREATIVE_COMMONS = 'Any',\n  /** Public Domain images. */\n  PUBLIC_DOMAIN = 'Public',\n  /** Free to share and use. */\n  SHARE = 'Share',\n  /** Free to share and use commercially. */\n  SHARE_COMMERCIALLY = 'ShareCommercially',\n  /** Free to modify, share, and use. */\n  MODIFY = 'Modify',\n  /** Free to modify, share, and use commercially. */\n  MODIFY_COMMERCIALLY = 'ModifyCommercially'\n}\n\n/** The options for {@link searchImages}. */\nexport interface ImageSearchOptions {\n  /** The safe search type of the search. */\n  safeSearch?: SafeSearchType;\n  /** The locale(?) of the search. Defaults to \"en-us\". */\n  locale?: string;\n  /** The number to offset the results to. */\n  offset?: number;\n  /**\n   * The string that acts like a key to a search.\n   * Set this if you made a search with the same query.\n   */\n  vqd?: string;\n  /** The color filter of the images. */\n  color?: ImageColor;\n  /** The layout of the images to search. */\n  layout?: ImageLayout;\n  /** The size filter of the images to search. */\n  size?: ImageSize;\n  /** The type of the images to search. */\n  type?: ImageType;\n  /** The license of the images to search. */\n  license?: ImageLicense;\n}\n\nconst defaultOptions: ImageSearchOptions = {\n  safeSearch: SafeSearchType.OFF,\n  locale: 'en-us',\n  offset: 0\n};\n\n/** The search results from {@link searchImages}. */\nexport interface ImageSearchResults {\n  /** Whether there were no results found. */\n  noResults: boolean;\n  /** The VQD of the search query. */\n  vqd: string;\n  /** The image results of the search. */\n  results: DuckbarImageResult[];\n}\n\n/**\n * Search images.\n * @category Search\n * @param query The query to search with\n * @param options The options of the search\n * @param needleOptions The options of the HTTP request\n * @returns Search results\n */\nexport async function searchImages(query: string, options?: ImageSearchOptions, needleOptions?: NeedleOptions): Promise<ImageSearchResults> {\n  if (!query) throw new Error('Query cannot be empty!');\n  if (!options) options = defaultOptions;\n  else options = sanityCheck(options);\n\n  let vqd = options.vqd!;\n  if (!vqd) vqd = await getVQD(query, 'web', needleOptions);\n\n  /* istanbul ignore next */\n  const filters = [\n    options.size ? `size:${options.size}` : '',\n    options.type ? `type:${options.type}` : '',\n    options.layout ? `layout:${options.layout}` : '',\n    options.color ? `color:${options.color}` : '',\n    options.license ? `license:${options.license}` : ''\n  ];\n\n  const queryObject: Record<string, string> = {\n    l: options.locale!,\n    o: 'json',\n    q: query,\n    vqd,\n    p: options.safeSearch === 0 ? '1' : '-1',\n    f: filters.toString(),\n    s: String(options.offset || 0)\n  };\n\n  const response = await needle('get', `https://duckduckgo.com/i.js?${queryString(queryObject)}`, needleOptions);\n\n  if (response.statusCode === 403) throw new Error('A server error occurred!');\n\n  const imagesResult = ensureJSON(response.body) as DuckbarResponse<DuckbarImageResult>;\n\n  return {\n    noResults: !imagesResult.results.length,\n    vqd,\n    results: imagesResult.results.map((image) => ({\n      ...image,\n      title: decode(image.title)\n    }))\n  };\n}\n\nfunction sanityCheck(options: ImageSearchOptions) {\n  options = Object.assign({}, defaultOptions, options);\n\n  if (!(options.safeSearch! in SafeSearchType)) throw new TypeError(`${options.safeSearch} is an invalid safe search type!`);\n\n  /* istanbul ignore next */\n  if (typeof options.safeSearch! === 'string') options.safeSearch = SafeSearchType[options.safeSearch!] as any as SafeSearchType;\n\n  if (typeof options.offset !== 'number') throw new TypeError(`Search offset is not a number!`);\n\n  if (options.offset! < 0) throw new RangeError('Search offset cannot be below zero!');\n\n  if (!options.locale || typeof options.locale! !== 'string') throw new TypeError('Search locale must be a string!');\n\n  if (options.size && !Object.values(ImageSize).includes(options.size)) throw new TypeError(`${options.size} is an invalid image size filter!`);\n\n  if (options.type && !Object.values(ImageType).includes(options.type)) throw new TypeError(`${options.type} is an invalid image type filter!`);\n\n  if (options.layout && !Object.values(ImageLayout).includes(options.layout))\n    throw new TypeError(`${options.layout} is an invalid image layout filter!`);\n\n  if (options.color && !Object.values(ImageColor).includes(options.color)) throw new TypeError(`${options.color} is an invalid color filter!`);\n\n  if (options.license && !Object.values(ImageLicense).includes(options.license))\n    throw new TypeError(`${options.license} is an invalid license filter!`);\n\n  if (options.vqd && !/\\d-\\d+-\\d+/.test(options.vqd)) throw new Error(`${options.vqd} is an invalid VQD!`);\n\n  return options;\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"0f04d6c789e40e051552a95c702da89b93b5ede2","contentHash":"161a1e8c63ed4ba76f19a7f05d0d1f4f81dbe2b605f4a19e25db76f2dd9570d1"},"C:\\Users\\sugge\\Documents\\GitHub\\Snazzah\\duck-duck-scrape\\src\\util.ts":{"path":"C:\\Users\\sugge\\Documents\\GitHub\\Snazzah\\duck-duck-scrape\\src\\util.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":183}},"4":{"start":{"line":7,"column":17},"end":{"line":7,"column":51}},"5":{"start":{"line":9,"column":0},"end":{"line":9,"column":55}},"6":{"start":{"line":11,"column":0},"end":{"line":11,"column":42}},"7":{"start":{"line":14,"column":0},"end":{"line":21,"column":77}},"8":{"start":{"line":16,"column":4},"end":{"line":16,"column":60}},"9":{"start":{"line":18,"column":4},"end":{"line":18,"column":65}},"10":{"start":{"line":20,"column":4},"end":{"line":20,"column":55}},"11":{"start":{"line":24,"column":0},"end":{"line":35,"column":77}},"12":{"start":{"line":26,"column":4},"end":{"line":26,"column":32}},"13":{"start":{"line":28,"column":4},"end":{"line":28,"column":32}},"14":{"start":{"line":30,"column":4},"end":{"line":30,"column":33}},"15":{"start":{"line":32,"column":4},"end":{"line":32,"column":34}},"16":{"start":{"line":34,"column":4},"end":{"line":34,"column":33}},"17":{"start":{"line":37,"column":4},"end":{"line":37,"column":49}},"18":{"start":{"line":39,"column":0},"end":{"line":39,"column":34}},"19":{"start":{"line":48,"column":4},"end":{"line":54,"column":5}},"20":{"start":{"line":49,"column":25},"end":{"line":49,"column":128}},"21":{"start":{"line":50,"column":8},"end":{"line":50,"column":56}},"22":{"start":{"line":53,"column":8},"end":{"line":53,"column":71}},"23":{"start":{"line":56,"column":0},"end":{"line":56,"column":24}},"24":{"start":{"line":58,"column":4},"end":{"line":61,"column":32}},"25":{"start":{"line":59,"column":8},"end":{"line":59,"column":43}},"26":{"start":{"line":60,"column":9},"end":{"line":61,"column":32}},"27":{"start":{"line":61,"column":8},"end":{"line":61,"column":32}},"28":{"start":{"line":62,"column":4},"end":{"line":62,"column":16}},"29":{"start":{"line":64,"column":0},"end":{"line":64,"column":32}},"30":{"start":{"line":66,"column":4},"end":{"line":66,"column":54}},"31":{"start":{"line":68,"column":0},"end":{"line":68,"column":40}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"(anonymous_1)","decl":{"start":{"line":14,"column":1},"end":{"line":14,"column":2}},"loc":{"start":{"line":14,"column":27},"end":{"line":21,"column":1}},"line":14},"2":{"name":"(anonymous_2)","decl":{"start":{"line":24,"column":1},"end":{"line":24,"column":2}},"loc":{"start":{"line":24,"column":27},"end":{"line":35,"column":1}},"line":24},"3":{"name":"queryString","decl":{"start":{"line":36,"column":9},"end":{"line":36,"column":20}},"loc":{"start":{"line":36,"column":28},"end":{"line":38,"column":1}},"line":36},"4":{"name":"getVQD","decl":{"start":{"line":47,"column":15},"end":{"line":47,"column":21}},"loc":{"start":{"line":47,"column":50},"end":{"line":55,"column":1}},"line":47},"5":{"name":"ensureJSON","decl":{"start":{"line":57,"column":9},"end":{"line":57,"column":19}},"loc":{"start":{"line":57,"column":26},"end":{"line":63,"column":1}},"line":57},"6":{"name":"parseSpiceBody","decl":{"start":{"line":65,"column":9},"end":{"line":65,"column":23}},"loc":{"start":{"line":65,"column":81},"end":{"line":67,"column":1}},"line":65}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":21,"column":20},"end":{"line":21,"column":75}},"type":"binary-expr","locations":[{"start":{"line":21,"column":20},"end":{"line":21,"column":42}},{"start":{"line":21,"column":47},"end":{"line":21,"column":74}}],"line":21},"4":{"loc":{"start":{"line":35,"column":20},"end":{"line":35,"column":75}},"type":"binary-expr","locations":[{"start":{"line":35,"column":20},"end":{"line":35,"column":42}},{"start":{"line":35,"column":47},"end":{"line":35,"column":74}}],"line":35},"5":{"loc":{"start":{"line":47,"column":29},"end":{"line":47,"column":39}},"type":"default-arg","locations":[{"start":{"line":47,"column":34},"end":{"line":47,"column":39}}],"line":47},"6":{"loc":{"start":{"line":58,"column":4},"end":{"line":61,"column":32}},"type":"if","locations":[{"start":{"line":58,"column":4},"end":{"line":61,"column":32}},{"start":{"line":58,"column":4},"end":{"line":61,"column":32}}],"line":58},"7":{"loc":{"start":{"line":60,"column":9},"end":{"line":61,"column":32}},"type":"if","locations":[{"start":{"line":60,"column":9},"end":{"line":61,"column":32}},{"start":{"line":60,"column":9},"end":{"line":61,"column":32}}],"line":60},"8":{"loc":{"start":{"line":65,"column":30},"end":{"line":65,"column":79}},"type":"default-arg","locations":[{"start":{"line":65,"column":38},"end":{"line":65,"column":79}}],"line":65}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":1,"14":1,"15":1,"16":1,"17":18,"18":1,"19":4,"20":4,"21":4,"22":1,"23":1,"24":8,"25":6,"26":2,"27":1,"28":1,"29":1,"30":1,"31":1},"f":{"0":1,"1":1,"2":1,"3":18,"4":4,"5":8,"6":1},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[1,1],"4":[1,1],"5":[2],"6":[6,2],"7":[1,1],"8":[1]},"inputSourceMap":{"version":3,"file":"C:/Users/sugge/Documents/GitHub/Snazzah/duck-duck-scrape/src/util.ts","sources":["C:/Users/sugge/Documents/GitHub/Snazzah/duck-duck-scrape/src/util.ts"],"names":[],"mappings":";;;;;;AAAA,oDAA+C;AAE/C,gBAAgB;AACH,QAAA,UAAU,GAAG,iCAAiC,CAAC;AAC5D,gBAAgB;AACH,QAAA,SAAS,GAAG,qBAAqB,CAAC;AAE/C,wDAAwD;AACxD,IAAY,cAOX;AAPD,WAAY,cAAc;IACxB,yCAAyC;IACzC,uDAAU,CAAA;IACV,0BAA0B;IAC1B,4DAAa,CAAA;IACb,oBAAoB;IACpB,kDAAQ,CAAA;AACV,CAAC,EAPW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAOzB;AAED,mEAAmE;AACnE,IAAY,cAWX;AAXD,WAAY,cAAc;IACxB,qBAAqB;IACrB,2BAAS,CAAA;IACT,yBAAyB;IACzB,2BAAS,CAAA;IACT,0BAA0B;IAC1B,4BAAU,CAAA;IACV,2BAA2B;IAC3B,6BAAW,CAAA;IACX,0BAA0B;IAC1B,4BAAU,CAAA;AACZ,CAAC,EAXW,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAWzB;AAED,SAAgB,WAAW,CAAC,KAA6B;IACvD,OAAO,IAAI,eAAe,CAAC,KAAK,CAAC,CAAC,QAAQ,EAAE,CAAC;AAC/C,CAAC;AAFD,kCAEC;AAED;;;;;;GAMG;AACI,KAAK,UAAU,MAAM,CAAC,KAAa,EAAE,EAAE,GAAG,KAAK,EAAE,OAAuB;IAC7E,IAAI;QACF,MAAM,QAAQ,GAAG,MAAM,IAAA,gBAAM,EAAC,KAAK,EAAE,2BAA2B,WAAW,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;QAC1G,OAAO,iBAAS,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAE,CAAC,CAAC,CAAC,CAAC;KAC1C;IAAC,OAAO,CAAC,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,oCAAoC,KAAK,IAAI,CAAC,CAAC;KAChE;AACH,CAAC;AAPD,wBAOC;AAED,SAAgB,UAAU,CAAC,IAAS;IAClC,IAAI,IAAI,YAAY,MAAM;QAAE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;SAC1D,IAAI,OAAO,IAAI,KAAK,QAAQ;QAAE,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC3D,OAAO,IAAI,CAAC;AACd,CAAC;AAJD,gCAIC;AAED,SAAgB,cAAc,CAAC,IAAS,EAAE,KAAK,GAAG,yCAAyC;IACzF,OAAO,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAE,CAAC,CAAC,CAAC,CAAC,CAAC;AACrD,CAAC;AAFD,wCAEC","sourcesContent":["import needle, { NeedleOptions } from 'needle';\n\n/** @internal */\nexport const SPICE_BASE = 'https://duckduckgo.com/js/spice';\n/** @internal */\nexport const VQD_REGEX = /vqd='(\\d+-\\d+-\\d+)'/;\n\n/** The safe search values when searching DuckDuckGo. */\nexport enum SafeSearchType {\n  /** Strict filtering, no NSFW content. */\n  STRICT = 0,\n  /** Moderate filtering. */\n  MODERATE = -1,\n  /** No filtering. */\n  OFF = -2\n}\n\n/** The type of time ranges of the search results in DuckDuckGo. */\nexport enum SearchTimeType {\n  /** From any time. */\n  ALL = 'a',\n  /** From the past day. */\n  DAY = 'd',\n  /** From the past week. */\n  WEEK = 'w',\n  /** From the past month. */\n  MONTH = 'm',\n  /** From the past year. */\n  YEAR = 'y'\n}\n\nexport function queryString(query: Record<string, string>) {\n  return new URLSearchParams(query).toString();\n}\n\n/**\n * Get the VQD of a search query.\n * @param query The query to search\n * @param ia The type(?) of search\n * @param options The options of the HTTP request\n * @returns The VQD\n */\nexport async function getVQD(query: string, ia = 'web', options?: NeedleOptions) {\n  try {\n    const response = await needle('get', `https://duckduckgo.com/?${queryString({ q: query, ia })}`, options);\n    return VQD_REGEX.exec(response.body)![1];\n  } catch (e) {\n    throw new Error(`Failed to get the VQD for query \"${query}\".`);\n  }\n}\n\nexport function ensureJSON(body: any) {\n  if (body instanceof Buffer) return JSON.parse(body.toString());\n  else if (typeof body === 'string') return JSON.parse(body);\n  return body;\n}\n\nexport function parseSpiceBody(body: any, regex = /^ddg_spice_[\\w]+\\(\\n?((?:.|\\n)+)\\n?\\);?/) {\n  return JSON.parse(regex.exec(body.toString())![1]);\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"76a54d321bb1cf827ce352fda603b1e88f763098","contentHash":"c7ee99ddd460cbc4a606d06b00f43b80dca95ca4f497ab9e4b2fe8c821b418fd"},"C:\\Users\\sugge\\Documents\\GitHub\\Snazzah\\duck-duck-scrape\\src\\search\\search.ts":{"path":"C:\\Users\\sugge\\Documents\\GitHub\\Snazzah\\duck-duck-scrape\\src\\search\\search.ts","statementMap":{"0":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"1":{"start":{"line":3,"column":4},"end":{"line":3,"column":62}},"2":{"start":{"line":5,"column":0},"end":{"line":5,"column":62}},"3":{"start":{"line":6,"column":0},"end":{"line":6,"column":47}},"4":{"start":{"line":7,"column":24},"end":{"line":7,"column":48}},"5":{"start":{"line":8,"column":17},"end":{"line":8,"column":51}},"6":{"start":{"line":9,"column":15},"end":{"line":9,"column":33}},"7":{"start":{"line":10,"column":23},"end":{"line":17,"column":1}},"8":{"start":{"line":18,"column":21},"end":{"line":18,"column":89}},"9":{"start":{"line":19,"column":21},"end":{"line":19,"column":119}},"10":{"start":{"line":20,"column":19},"end":{"line":20,"column":117}},"11":{"start":{"line":21,"column":21},"end":{"line":21,"column":137}},"12":{"start":{"line":22,"column":31},"end":{"line":22,"column":148}},"13":{"start":{"line":32,"column":4},"end":{"line":33,"column":50}},"14":{"start":{"line":33,"column":8},"end":{"line":33,"column":50}},"15":{"start":{"line":34,"column":4},"end":{"line":37,"column":39}},"16":{"start":{"line":35,"column":8},"end":{"line":35,"column":33}},"17":{"start":{"line":37,"column":8},"end":{"line":37,"column":39}},"18":{"start":{"line":38,"column":14},"end":{"line":38,"column":25}},"19":{"start":{"line":39,"column":4},"end":{"line":40,"column":68}},"20":{"start":{"line":40,"column":8},"end":{"line":40,"column":68}},"21":{"start":{"line":76,"column":21},"end":{"line":76,"column":147}},"22":{"start":{"line":77,"column":4},"end":{"line":78,"column":52}},"23":{"start":{"line":78,"column":8},"end":{"line":78,"column":52}},"24":{"start":{"line":79,"column":26},"end":{"line":79,"column":96}},"25":{"start":{"line":81,"column":4},"end":{"line":90,"column":5}},"26":{"start":{"line":82,"column":27},"end":{"line":82,"column":43}},"27":{"start":{"line":91,"column":20},"end":{"line":95,"column":5}},"28":{"start":{"line":97,"column":4},"end":{"line":114,"column":5}},"29":{"start":{"line":98,"column":8},"end":{"line":99,"column":21}},"30":{"start":{"line":99,"column":12},"end":{"line":99,"column":21}},"31":{"start":{"line":101,"column":8},"end":{"line":104,"column":9}},"32":{"start":{"line":102,"column":44},"end":{"line":102,"column":64}},"33":{"start":{"line":103,"column":12},"end":{"line":103,"column":45}},"34":{"start":{"line":105,"column":8},"end":{"line":113,"column":11}},"35":{"start":{"line":116,"column":24},"end":{"line":116,"column":56}},"36":{"start":{"line":117,"column":4},"end":{"line":123,"column":5}},"37":{"start":{"line":118,"column":29},"end":{"line":118,"column":78}},"38":{"start":{"line":119,"column":8},"end":{"line":122,"column":11}},"39":{"start":{"line":120,"column":12},"end":{"line":120,"column":59}},"40":{"start":{"line":121,"column":12},"end":{"line":121,"column":21}},"41":{"start":{"line":125,"column":22},"end":{"line":125,"column":52}},"42":{"start":{"line":126,"column":4},"end":{"line":138,"column":5}},"43":{"start":{"line":127,"column":27},"end":{"line":127,"column":74}},"44":{"start":{"line":128,"column":8},"end":{"line":137,"column":12}},"45":{"start":{"line":128,"column":60},"end":{"line":137,"column":9}},"46":{"start":{"line":140,"column":24},"end":{"line":140,"column":56}},"47":{"start":{"line":141,"column":4},"end":{"line":158,"column":5}},"48":{"start":{"line":142,"column":28},"end":{"line":142,"column":77}},"49":{"start":{"line":143,"column":8},"end":{"line":143,"column":28}},"50":{"start":{"line":160,"column":25},"end":{"line":160,"column":67}},"51":{"start":{"line":161,"column":4},"end":{"line":170,"column":5}},"52":{"start":{"line":162,"column":30},"end":{"line":162,"column":80}},"53":{"start":{"line":163,"column":8},"end":{"line":163,"column":29}},"54":{"start":{"line":164,"column":8},"end":{"line":169,"column":9}},"55":{"start":{"line":165,"column":12},"end":{"line":168,"column":15}},"56":{"start":{"line":172,"column":4},"end":{"line":172,"column":19}},"57":{"start":{"line":174,"column":0},"end":{"line":174,"column":24}},"58":{"start":{"line":176,"column":4},"end":{"line":176,"column":57}},"59":{"start":{"line":177,"column":4},"end":{"line":178,"column":85}},"60":{"start":{"line":178,"column":8},"end":{"line":178,"column":85}},"61":{"start":{"line":182,"column":4},"end":{"line":183,"column":62}},"62":{"start":{"line":183,"column":8},"end":{"line":183,"column":62}},"63":{"start":{"line":184,"column":4},"end":{"line":185,"column":68}},"64":{"start":{"line":185,"column":8},"end":{"line":185,"column":68}},"65":{"start":{"line":186,"column":4},"end":{"line":189,"column":74}},"66":{"start":{"line":189,"column":8},"end":{"line":189,"column":74}},"67":{"start":{"line":190,"column":4},"end":{"line":191,"column":63}},"68":{"start":{"line":191,"column":8},"end":{"line":191,"column":63}},"69":{"start":{"line":192,"column":4},"end":{"line":193,"column":63}},"70":{"start":{"line":193,"column":8},"end":{"line":193,"column":63}},"71":{"start":{"line":194,"column":4},"end":{"line":195,"column":70}},"72":{"start":{"line":195,"column":8},"end":{"line":195,"column":70}},"73":{"start":{"line":196,"column":4},"end":{"line":197,"column":61}},"74":{"start":{"line":197,"column":8},"end":{"line":197,"column":61}},"75":{"start":{"line":198,"column":4},"end":{"line":198,"column":19}},"76":{"start":{"line":209,"column":4},"end":{"line":210,"column":50}},"77":{"start":{"line":210,"column":8},"end":{"line":210,"column":50}},"78":{"start":{"line":211,"column":24},"end":{"line":214,"column":5}},"79":{"start":{"line":215,"column":21},"end":{"line":215,"column":140}},"80":{"start":{"line":216,"column":4},"end":{"line":216,"column":49}},"81":{"start":{"line":218,"column":0},"end":{"line":218,"column":36}}},"fnMap":{"0":{"name":"(anonymous_0)","decl":{"start":{"line":2,"column":56},"end":{"line":2,"column":57}},"loc":{"start":{"line":2,"column":71},"end":{"line":4,"column":1}},"line":2},"1":{"name":"search","decl":{"start":{"line":31,"column":15},"end":{"line":31,"column":21}},"loc":{"start":{"line":31,"column":53},"end":{"line":173,"column":1}},"line":31},"2":{"name":"(anonymous_2)","decl":{"start":{"line":119,"column":50},"end":{"line":119,"column":51}},"loc":{"start":{"line":119,"column":57},"end":{"line":122,"column":9}},"line":119},"3":{"name":"(anonymous_3)","decl":{"start":{"line":128,"column":46},"end":{"line":128,"column":47}},"loc":{"start":{"line":128,"column":60},"end":{"line":137,"column":9}},"line":128},"4":{"name":"sanityCheck","decl":{"start":{"line":175,"column":9},"end":{"line":175,"column":20}},"loc":{"start":{"line":175,"column":30},"end":{"line":199,"column":1}},"line":175},"5":{"name":"autocomplete","decl":{"start":{"line":208,"column":15},"end":{"line":208,"column":27}},"loc":{"start":{"line":208,"column":58},"end":{"line":217,"column":1}},"line":208}},"branchMap":{"0":{"loc":{"start":{"line":2,"column":22},"end":{"line":4,"column":1}},"type":"binary-expr","locations":[{"start":{"line":2,"column":23},"end":{"line":2,"column":27}},{"start":{"line":2,"column":31},"end":{"line":2,"column":51}},{"start":{"line":2,"column":56},"end":{"line":4,"column":1}}],"line":2},"1":{"loc":{"start":{"line":3,"column":11},"end":{"line":3,"column":61}},"type":"cond-expr","locations":[{"start":{"line":3,"column":37},"end":{"line":3,"column":40}},{"start":{"line":3,"column":43},"end":{"line":3,"column":61}}],"line":3},"2":{"loc":{"start":{"line":3,"column":12},"end":{"line":3,"column":33}},"type":"binary-expr","locations":[{"start":{"line":3,"column":12},"end":{"line":3,"column":15}},{"start":{"line":3,"column":19},"end":{"line":3,"column":33}}],"line":3},"3":{"loc":{"start":{"line":32,"column":4},"end":{"line":33,"column":50}},"type":"if","locations":[{"start":{"line":32,"column":4},"end":{"line":33,"column":50}},{"start":{"line":32,"column":4},"end":{"line":33,"column":50}}],"line":32},"4":{"loc":{"start":{"line":34,"column":4},"end":{"line":37,"column":39}},"type":"if","locations":[{"start":{"line":34,"column":4},"end":{"line":37,"column":39}},{"start":{"line":34,"column":4},"end":{"line":37,"column":39}}],"line":34},"5":{"loc":{"start":{"line":39,"column":4},"end":{"line":40,"column":68}},"type":"if","locations":[{"start":{"line":39,"column":4},"end":{"line":40,"column":68}},{"start":{"line":39,"column":4},"end":{"line":40,"column":68}}],"line":39},"6":{"loc":{"start":{"line":77,"column":4},"end":{"line":78,"column":52}},"type":"if","locations":[{"start":{"line":77,"column":4},"end":{"line":78,"column":52}},{"start":{"line":77,"column":4},"end":{"line":78,"column":52}}],"line":77},"7":{"loc":{"start":{"line":81,"column":4},"end":{"line":90,"column":5}},"type":"if","locations":[{"start":{"line":81,"column":4},"end":{"line":90,"column":5}},{"start":{"line":81,"column":4},"end":{"line":90,"column":5}}],"line":81},"8":{"loc":{"start":{"line":81,"column":8},"end":{"line":81,"column":64}},"type":"binary-expr","locations":[{"start":{"line":81,"column":8},"end":{"line":81,"column":34}},{"start":{"line":81,"column":38},"end":{"line":81,"column":64}}],"line":81},"9":{"loc":{"start":{"line":98,"column":8},"end":{"line":99,"column":21}},"type":"if","locations":[{"start":{"line":98,"column":8},"end":{"line":99,"column":21}},{"start":{"line":98,"column":8},"end":{"line":99,"column":21}}],"line":98},"10":{"loc":{"start":{"line":101,"column":8},"end":{"line":104,"column":9}},"type":"if","locations":[{"start":{"line":101,"column":8},"end":{"line":104,"column":9}},{"start":{"line":101,"column":8},"end":{"line":104,"column":9}}],"line":101},"11":{"loc":{"start":{"line":117,"column":4},"end":{"line":123,"column":5}},"type":"if","locations":[{"start":{"line":117,"column":4},"end":{"line":123,"column":5}},{"start":{"line":117,"column":4},"end":{"line":123,"column":5}}],"line":117},"12":{"loc":{"start":{"line":126,"column":4},"end":{"line":138,"column":5}},"type":"if","locations":[{"start":{"line":126,"column":4},"end":{"line":138,"column":5}},{"start":{"line":126,"column":4},"end":{"line":138,"column":5}}],"line":126},"13":{"loc":{"start":{"line":141,"column":4},"end":{"line":158,"column":5}},"type":"if","locations":[{"start":{"line":141,"column":4},"end":{"line":158,"column":5}},{"start":{"line":141,"column":4},"end":{"line":158,"column":5}}],"line":141},"14":{"loc":{"start":{"line":161,"column":4},"end":{"line":170,"column":5}},"type":"if","locations":[{"start":{"line":161,"column":4},"end":{"line":170,"column":5}},{"start":{"line":161,"column":4},"end":{"line":170,"column":5}}],"line":161},"15":{"loc":{"start":{"line":177,"column":4},"end":{"line":178,"column":85}},"type":"if","locations":[{"start":{"line":177,"column":4},"end":{"line":178,"column":85}},{"start":{"line":177,"column":4},"end":{"line":178,"column":85}}],"line":177},"16":{"loc":{"start":{"line":182,"column":4},"end":{"line":183,"column":62}},"type":"if","locations":[{"start":{"line":182,"column":4},"end":{"line":183,"column":62}},{"start":{"line":182,"column":4},"end":{"line":183,"column":62}}],"line":182},"17":{"loc":{"start":{"line":184,"column":4},"end":{"line":185,"column":68}},"type":"if","locations":[{"start":{"line":184,"column":4},"end":{"line":185,"column":68}},{"start":{"line":184,"column":4},"end":{"line":185,"column":68}}],"line":184},"18":{"loc":{"start":{"line":186,"column":4},"end":{"line":189,"column":74}},"type":"if","locations":[{"start":{"line":186,"column":4},"end":{"line":189,"column":74}},{"start":{"line":186,"column":4},"end":{"line":189,"column":74}}],"line":186},"19":{"loc":{"start":{"line":186,"column":8},"end":{"line":188,"column":66}},"type":"binary-expr","locations":[{"start":{"line":186,"column":8},"end":{"line":186,"column":20}},{"start":{"line":187,"column":8},"end":{"line":187,"column":68}},{"start":{"line":188,"column":8},"end":{"line":188,"column":66}}],"line":186},"20":{"loc":{"start":{"line":190,"column":4},"end":{"line":191,"column":63}},"type":"if","locations":[{"start":{"line":190,"column":4},"end":{"line":191,"column":63}},{"start":{"line":190,"column":4},"end":{"line":191,"column":63}}],"line":190},"21":{"loc":{"start":{"line":190,"column":8},"end":{"line":190,"column":61}},"type":"binary-expr","locations":[{"start":{"line":190,"column":8},"end":{"line":190,"column":23}},{"start":{"line":190,"column":27},"end":{"line":190,"column":61}}],"line":190},"22":{"loc":{"start":{"line":192,"column":4},"end":{"line":193,"column":63}},"type":"if","locations":[{"start":{"line":192,"column":4},"end":{"line":193,"column":63}},{"start":{"line":192,"column":4},"end":{"line":193,"column":63}}],"line":192},"23":{"loc":{"start":{"line":192,"column":8},"end":{"line":192,"column":61}},"type":"binary-expr","locations":[{"start":{"line":192,"column":8},"end":{"line":192,"column":23}},{"start":{"line":192,"column":27},"end":{"line":192,"column":61}}],"line":192},"24":{"loc":{"start":{"line":194,"column":4},"end":{"line":195,"column":70}},"type":"if","locations":[{"start":{"line":194,"column":4},"end":{"line":195,"column":70}},{"start":{"line":194,"column":4},"end":{"line":195,"column":70}}],"line":194},"25":{"loc":{"start":{"line":194,"column":8},"end":{"line":194,"column":73}},"type":"binary-expr","locations":[{"start":{"line":194,"column":8},"end":{"line":194,"column":29}},{"start":{"line":194,"column":33},"end":{"line":194,"column":73}}],"line":194},"26":{"loc":{"start":{"line":196,"column":4},"end":{"line":197,"column":61}},"type":"if","locations":[{"start":{"line":196,"column":4},"end":{"line":197,"column":61}},{"start":{"line":196,"column":4},"end":{"line":197,"column":61}}],"line":196},"27":{"loc":{"start":{"line":196,"column":8},"end":{"line":196,"column":54}},"type":"binary-expr","locations":[{"start":{"line":196,"column":8},"end":{"line":196,"column":19}},{"start":{"line":196,"column":23},"end":{"line":196,"column":54}}],"line":196},"28":{"loc":{"start":{"line":209,"column":4},"end":{"line":210,"column":50}},"type":"if","locations":[{"start":{"line":209,"column":4},"end":{"line":210,"column":50}},{"start":{"line":209,"column":4},"end":{"line":210,"column":50}}],"line":209},"29":{"loc":{"start":{"line":213,"column":12},"end":{"line":213,"column":29}},"type":"binary-expr","locations":[{"start":{"line":213,"column":12},"end":{"line":213,"column":18}},{"start":{"line":213,"column":22},"end":{"line":213,"column":29}}],"line":213}},"s":{"0":1,"1":1,"2":1,"3":1,"4":1,"5":1,"6":1,"7":1,"8":1,"9":1,"10":1,"11":1,"12":1,"13":16,"14":1,"15":15,"16":1,"17":14,"18":7,"19":7,"20":1,"21":7,"22":7,"23":1,"24":6,"25":6,"26":1,"27":5,"28":5,"29":148,"30":5,"31":143,"32":44,"33":44,"34":143,"35":5,"36":5,"37":3,"38":3,"39":60,"40":60,"41":5,"42":5,"43":1,"44":1,"45":4,"46":5,"47":5,"48":2,"49":2,"50":5,"51":5,"52":4,"53":4,"54":4,"55":32,"56":5,"57":1,"58":14,"59":14,"60":1,"61":13,"62":1,"63":12,"64":1,"65":11,"66":1,"67":10,"68":1,"69":9,"70":1,"71":8,"72":1,"73":7,"74":1,"75":6,"76":2,"77":1,"78":1,"79":1,"80":1,"81":1},"f":{"0":1,"1":16,"2":60,"3":4,"4":14,"5":2},"b":{"0":[1,1,1],"1":[0,1],"2":[1,1],"3":[1,15],"4":[1,14],"5":[1,6],"6":[1,6],"7":[1,5],"8":[6,1],"9":[5,143],"10":[44,99],"11":[3,2],"12":[1,4],"13":[2,3],"14":[4,1],"15":[1,13],"16":[1,12],"17":[1,11],"18":[1,10],"19":[11,11,1],"20":[1,9],"21":[10,10],"22":[1,8],"23":[9,9],"24":[1,7],"25":[8,8],"26":[1,6],"27":[7,7],"28":[1,1],"29":[1,1]},"inputSourceMap":{"version":3,"file":"C:/Users/sugge/Documents/GitHub/Snazzah/duck-duck-scrape/src/search/search.ts","sources":["C:/Users/sugge/Documents/GitHub/Snazzah/duck-duck-scrape/src/search/search.ts"],"names":[],"mappings":"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","sourcesContent":["import { decode } from 'html-entities';\nimport needle, { NeedleOptions } from 'needle';\n\nimport {\n  CallbackDuckbarPayload,\n  CallbackNextSearch,\n  CallbackSearchResult,\n  DuckbarImageResult,\n  DuckbarNewsResult,\n  DuckbarRelatedSearch,\n  DuckbarVideoResult\n} from '../types';\nimport { ensureJSON, getVQD, queryString, SafeSearchType, SearchTimeType } from '../util';\nimport { NewsResult } from './news';\nimport { VideoResult } from './videos';\n\n/** The options for {@link search}. */\nexport interface SearchOptions {\n  /** The safe search type of the search. */\n  safeSearch?: SafeSearchType;\n  /** The time range of the searches, can be a SearchTimeType or a date range (\"2021-03-16..2021-03-30\") */\n  time?: SearchTimeType | string;\n  /** The locale(?) of the search. Defaults to \"en-us\". */\n  locale?: string;\n  /** The region of the search. Defaults to \"wt-wt\" or all regions. */\n  region?: string;\n  /** The market region(?) of the search. Defaults to \"US\". */\n  marketRegion?: string;\n  /** The number to offset the results to. */\n  offset?: number;\n  /**\n   * The string that acts like a key to a search.\n   * Set this if you made a search with the same query.\n   */\n  vqd?: string;\n}\n\nconst defaultOptions: SearchOptions = {\n  safeSearch: SafeSearchType.OFF,\n  time: SearchTimeType.ALL,\n  locale: 'en-us',\n  region: 'wt-wt',\n  offset: 0,\n  marketRegion: 'us'\n};\n\nconst SEARCH_REGEX = /DDG\\.pageLayout\\.load\\('d',(\\[.+\\])\\);DDG\\.duckbar\\.load\\('images'/;\nconst IMAGES_REGEX = /;DDG\\.duckbar\\.load\\('images', ({\"ads\":.+\"vqd\":{\".+\":\"\\d-\\d+-\\d+\"}})\\);DDG\\.duckbar\\.load\\('news/;\nconst NEWS_REGEX = /;DDG\\.duckbar\\.load\\('news', ({\"ads\":.+\"vqd\":{\".+\":\"\\d-\\d+-\\d+\"}})\\);DDG\\.duckbar\\.load\\('videos/;\nconst VIDEOS_REGEX = /;DDG\\.duckbar\\.load\\('videos', ({\"ads\":.+\"vqd\":{\".+\":\"\\d-\\d+-\\d+\"}})\\);DDG\\.duckbar\\.loadModule\\('related_searches/;\nconst RELATED_SEARCHES_REGEX = /DDG\\.duckbar\\.loadModule\\('related_searches', ({\"ads\":.+\"vqd\":{\".+\":\"\\d-\\d+-\\d+\"}})\\);DDG\\.duckbar\\.load\\('products/;\n\n/**\n * The search results from {@link search}.\n * `images`, `news`, `videos` and `related` only show up if the query\n * shows elements of these in a webpage search.\n */\nexport interface SearchResults {\n  /** Whether there were no results found. */\n  noResults: boolean;\n  /** The VQD of the search query. */\n  vqd: string;\n  /** The web results of the search. */\n  results: SearchResult[];\n  /** The image results of the search. */\n  images?: DuckbarImageResult[];\n  /** The news article results of the search. */\n  news?: NewsResult[];\n  /** The video results of the search. */\n  videos?: VideoResult[];\n  /** The related searches of the query. */\n  related?: RelatedResult[];\n}\n\n/** A web search result. */\nexport interface SearchResult {\n  /** The hostname of the website. (i.e. \"google.com\") */\n  hostname: string;\n  /** The URL of the result. */\n  url: string;\n  /** The title of the result. */\n  title: string;\n  /**\n   * The sanitized description of the result.\n   * Bold tags will still be present in this string.\n   */\n  description: string;\n  /** The description of the result. */\n  rawDescription: string;\n  /** The icon of the website. */\n  icon: string;\n  /** The ddg!bang information of the website, if any. */\n  bang?: SearchResultBang;\n}\n\nexport interface SearchResultBang {\n  /** The prefix of the bang. (i.e. \"w\" for !w) */\n  prefix: string;\n  /** The title of the bang. */\n  title: string;\n  /** The domain of the bang. */\n  domain: string;\n}\n\nexport interface RelatedResult {\n  text: string;\n  raw: string;\n}\n\n/**\n * Search something.\n * @category Search\n * @param query The query to search with\n * @param options The options of the search\n * @param needleOptions The options of the HTTP request\n * @returns Search results\n */\nexport async function search(query: string, options?: SearchOptions, needleOptions?: NeedleOptions): Promise<SearchResults> {\n  if (!query) throw new Error('Query cannot be empty!');\n  if (!options) options = defaultOptions;\n  else options = sanityCheck(options);\n\n  let vqd = options.vqd!;\n  if (!vqd) vqd = await getVQD(query, 'web', needleOptions);\n\n  /* istanbul ignore next */\n  const queryObject: Record<string, string> = {\n    q: query,\n    ...(options.safeSearch !== SafeSearchType.STRICT ? { t: 'D' } : {}),\n    l: options.locale!,\n    ...(options.safeSearch === SafeSearchType.STRICT ? { p: '1' } : {}),\n    kl: options.region || 'wt-wt',\n    s: String(options.offset),\n    dl: 'en',\n    ct: 'US',\n    ss_mkt: options.marketRegion!,\n    df: options.time! as string,\n    vqd,\n    ...(options.safeSearch !== SafeSearchType.STRICT ? { ex: String(options.safeSearch) } : {}),\n    sp: '1',\n    bpa: '1',\n    biaexp: 'b',\n    msvrtexp: 'b',\n    ...(options.safeSearch === SafeSearchType.STRICT\n      ? {\n          videxp: 'a',\n          nadse: 'b',\n          eclsexp: 'a',\n          stiaexp: 'a',\n          tjsexp: 'b',\n          related: 'b',\n          msnexp: 'a'\n        }\n      : {\n          nadse: 'b',\n          eclsexp: 'b',\n          tjsexp: 'b'\n          // cdrexp: 'b'\n        })\n  };\n\n  const response = await needle('get', `https://links.duckduckgo.com/d.js?${queryString(queryObject)}`, needleOptions);\n\n  if ((response.body as string).includes('DDG.deep.is506')) throw new Error('A server error occurred!');\n\n  const searchResults = JSON.parse(SEARCH_REGEX.exec(response.body)![1].replace(/\\t/g, '    ')) as (CallbackSearchResult | CallbackNextSearch)[];\n\n  // check for no results\n  if (searchResults.length === 1 && !('n' in searchResults[0])) {\n    const onlyResult = searchResults[0] as CallbackSearchResult;\n    /* istanbul ignore next */\n    if ((!onlyResult.da && onlyResult.t === 'EOF') || !onlyResult.a || onlyResult.d === 'google.com search')\n      return {\n        noResults: true,\n        vqd,\n        results: []\n      };\n  }\n\n  const results: SearchResults = {\n    noResults: false,\n    vqd,\n    results: []\n  };\n\n  // Populate search results\n  for (const search of searchResults) {\n    if ('n' in search) continue;\n    let bang: SearchResultBang | undefined;\n    if (search.b) {\n      const [prefix, title, domain] = search.b.split('\\t');\n      bang = { prefix, title, domain };\n    }\n    results.results.push({\n      title: search.t,\n      description: decode(search.a),\n      rawDescription: search.a,\n      hostname: search.i,\n      icon: `https://external-content.duckduckgo.com/ip3/${search.i}.ico`,\n      url: search.u,\n      bang\n    });\n  }\n\n  // Images\n  const imagesMatch = IMAGES_REGEX.exec(response.body);\n  if (imagesMatch) {\n    const imagesResult = JSON.parse(imagesMatch[1].replace(/\\t/g, '    ')) as CallbackDuckbarPayload<DuckbarImageResult>;\n    results.images = imagesResult.results.map((i) => {\n      i.title = decode(i.title);\n      return i;\n    });\n  }\n\n  // News\n  const newsMatch = NEWS_REGEX.exec(response.body);\n  if (newsMatch) {\n    const newsResult = JSON.parse(newsMatch[1].replace(/\\t/g, '    ')) as CallbackDuckbarPayload<DuckbarNewsResult>;\n    results.news = newsResult.results.map((article) => ({\n      date: article.date,\n      excerpt: decode(article.excerpt),\n      image: article.image,\n      relativeTime: article.relative_time,\n      syndicate: article.syndicate,\n      title: decode(article.title),\n      url: article.url,\n      isOld: !!article.is_old\n    })) as NewsResult[];\n  }\n\n  // Videos\n  const videosMatch = VIDEOS_REGEX.exec(response.body);\n  if (videosMatch) {\n    const videoResult = JSON.parse(videosMatch[1].replace(/\\t/g, '    ')) as CallbackDuckbarPayload<DuckbarVideoResult>;\n    results.videos = [];\n    /* istanbul ignore next */\n    for (const video of videoResult.results) {\n      results.videos.push({\n        url: video.content,\n        title: decode(video.title),\n        description: decode(video.description),\n        image: video.images.large || video.images.medium || video.images.small || video.images.motion,\n        duration: video.duration,\n        publishedOn: video.publisher,\n        published: video.published,\n        publisher: video.uploader,\n        viewCount: video.statistics.viewCount || undefined\n      });\n    }\n  }\n\n  // Related Searches\n  const relatedMatch = RELATED_SEARCHES_REGEX.exec(response.body);\n  if (relatedMatch) {\n    const relatedResult = JSON.parse(relatedMatch[1].replace(/\\t/g, '    ')) as CallbackDuckbarPayload<DuckbarRelatedSearch>;\n    results.related = [];\n    for (const related of relatedResult.results) {\n      results.related.push({\n        text: related.text,\n        raw: related.display_text\n      });\n    }\n  }\n\n  // TODO: Products\n\n  return results;\n}\n\nfunction sanityCheck(options: SearchOptions) {\n  options = Object.assign({}, defaultOptions, options);\n\n  if (!(options.safeSearch! in SafeSearchType)) throw new TypeError(`${options.safeSearch} is an invalid safe search type!`);\n\n  /* istanbul ignore next */\n  if (typeof options.safeSearch! === 'string') options.safeSearch = SafeSearchType[options.safeSearch!] as any as SafeSearchType;\n\n  if (typeof options.offset !== 'number') throw new TypeError(`Search offset is not a number!`);\n\n  if (options.offset! < 0) throw new RangeError('Search offset cannot be below zero!');\n\n  if (\n    options.time &&\n    !Object.values(SearchTimeType).includes(options.time as SearchTimeType) &&\n    !/\\d{4}-\\d{2}-\\d{2}..\\d{4}-\\d{2}-\\d{2}/.test(options.time as string)\n  )\n    throw new TypeError(`${options.time} is an invalid search time!`);\n\n  if (!options.locale || typeof options.locale! !== 'string') throw new TypeError('Search locale must be a string!');\n\n  if (!options.region || typeof options.region! !== 'string') throw new TypeError('Search region must be a string!');\n\n  if (!options.marketRegion || typeof options.marketRegion! !== 'string') throw new TypeError('Search market region must be a string!');\n\n  if (options.vqd && !/\\d-\\d+-\\d+/.test(options.vqd)) throw new Error(`${options.vqd} is an invalid VQD!`);\n\n  return options;\n}\n\n/** An auto-complete term. */\nexport interface AutocompleteTerm {\n  /** The phrase of the auto-completed term. */\n  phrase: string;\n}\n\n/** An auto-complete bang. */\nexport interface AutocompleteBang {\n  /** The image of the bang */\n  image: string;\n  /** The prefix of the bang. */\n  phrase: string;\n  score: number;\n  /** The title of the bang. */\n  snippet: string;\n}\n\nexport type AutocompleteResult = AutocompleteTerm | AutocompleteBang;\n\n/**\n * Get auto-complete terms from a query.\n * @category Search\n * @param query The query to search\n * @param region The region to search as\n * @param needleOptions The options of the HTTP request\n * @returns Autocomplete terms\n */\nexport async function autocomplete(query: string, region?: string, needleOptions?: NeedleOptions): Promise<AutocompleteResult[]> {\n  if (!query) throw new Error('Query cannot be empty!');\n\n  const queryObject: Record<string, string> = {\n    q: query,\n    kl: region || 'wt-wt'\n  };\n\n  const response = await needle('get', `https://duckduckgo.com/ac/?${queryString(queryObject)}`, needleOptions);\n\n  return ensureJSON(response.body);\n}\n"]},"_coverageSchema":"1a1c01bbd47fc00a2c39e90264f33305004495a9","hash":"096bb77fd9a523e0af63cfc038c7ad06746a0da3","contentHash":"0ad91c842bd3d2c94edd6ff8c2c795df5419ee725326617d409500ed1f6c679a"}}